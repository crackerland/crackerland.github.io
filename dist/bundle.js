!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){(function(t,r,i){var o;(function(s){var u={function:!0,object:!0};function c(t){return t&&t.Object===Object?t:null}var h,a=u[typeof e]&&e&&!e.nodeType?e:null,l=u[typeof t]&&t&&!t.nodeType?t:null,f=c(a&&l&&"object"==typeof r&&r),p=c(u[typeof self]&&self),d=c(u[typeof window]&&window),b=l&&l.exports===a?a:null,v=c(u[typeof this]&&this),_=f||d!==(v&&v.window)&&d||p||v||Function("return this")(),y={internals:{},config:{Promise:_.Promise},helpers:{}},w=y.helpers.noop=function(){},m=y.helpers.identity=function(t){return t},g=y.helpers.defaultNow=Date.now,E=y.helpers.defaultComparer=function(t,e){return mt(t,e)},C=y.helpers.defaultSubComparer=function(t,e){return t>e?1:t<e?-1:0},x=(y.helpers.defaultKeySerializer=function(t){return t.toString()},y.helpers.defaultError=function(t){throw t}),S=y.helpers.isPromise=function(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then},N=y.helpers.isFunction=((h=function(t){return"function"==typeof t||!1})(/x/)&&(h=function(t){return"function"==typeof t&&"[object Function]"==toString.call(t)}),h);function D(t){for(var e=[],n=0,r=t.length;n<r;n++)e.push(t[n]);return e}var j={e:{}};var A=y.internals.tryCatch=function(t){if(!N(t))throw new TypeError("fn must be a function");return e=t,function(){try{return e.apply(this,arguments)}catch(t){return j.e=t,j}};var e};function k(t){throw t}y.config.longStackSupport=!1;var O=!1,q=A(function(){throw new Error})();O=!!q.e&&!!q.e.stack;var T,F=V(),P="From previous event:";function M(t,e){if(O&&e.stack&&"object"==typeof t&&null!==t&&t.stack&&-1===t.stack.indexOf(P)){for(var n=[],r=e;r;r=r.source)r.stack&&n.unshift(r.stack);n.unshift(t.stack);var i=n.join("\n"+P+"\n");t.stack=function(t){for(var e=t.split("\n"),n=[],r=0,i=e.length;r<i;r++){var o=e[r];!R(o)&&(-1===(s=o).indexOf("(module.js:")&&-1===s.indexOf("(node.js:"))&&o&&n.push(o)}var s;return n.join("\n")}(i)}}function R(t){var e=L(t);if(!e)return!1;var n=e[0],r=e[1];return n===T&&r>=F&&r<=Bo}function V(){if(O)try{throw new Error}catch(n){var t=n.stack.split("\n"),e=L(t[0].indexOf("@")>0?t[1]:t[2]);if(!e)return;return T=e[0],e[1]}}function L(t){var e=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(t);if(e)return[e[1],Number(e[2])];var n=/at ([^ ]+):(\d+):(?:\d+)$/.exec(t);if(n)return[n[1],Number(n[2])];var r=/.*@(.+):(\d+)$/.exec(t);return r?[r[1],Number(r[2])]:void 0}var W=y.EmptyError=function(){this.message="Sequence contains no elements.",Error.call(this)};W.prototype=Object.create(Error.prototype),W.prototype.name="EmptyError";var I=y.ObjectDisposedError=function(){this.message="Object has been disposed",Error.call(this)};I.prototype=Object.create(Error.prototype),I.prototype.name="ObjectDisposedError";var B=y.ArgumentOutOfRangeError=function(){this.message="Argument out of range",Error.call(this)};B.prototype=Object.create(Error.prototype),B.prototype.name="ArgumentOutOfRangeError";var z=y.NotSupportedError=function(t){this.message=t||"This operation is not supported",Error.call(this)};z.prototype=Object.create(Error.prototype),z.prototype.name="NotSupportedError";var U=y.NotImplementedError=function(t){this.message=t||"This operation is not implemented",Error.call(this)};U.prototype=Object.create(Error.prototype),U.prototype.name="NotImplementedError";var G=y.helpers.notImplemented=function(){throw new U},H=(y.helpers.notSupported=function(){throw new z},"function"==typeof Symbol&&Symbol.iterator||"_es6shim_iterator_");_.Set&&"function"==typeof(new _.Set)["@@iterator"]&&(H="@@iterator");var Q=y.doneEnumerator={done:!0,value:s},K=y.helpers.isIterable=function(t){return t&&t[H]!==s},J=y.helpers.isArrayLike=function(t){return t&&t.length!==s};y.helpers.iterator=H;var $=y.internals.bindCallback=function(t,e,n){if(void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}},X="[object Arguments]",Y="[object Array]",Z="[object Boolean]",tt="[object Date]",et="[object Error]",nt="[object Number]",rt="[object Object]",it="[object RegExp]",ot="[object String]",st={};st["[object Float32Array]"]=st["[object Float64Array]"]=st["[object Int8Array]"]=st["[object Int16Array]"]=st["[object Int32Array]"]=st["[object Uint8Array]"]=st["[object Uint8ClampedArray]"]=st["[object Uint16Array]"]=st["[object Uint32Array]"]=!0,st[X]=st[Y]=st["[object ArrayBuffer]"]=st[Z]=st[tt]=st[et]=st["[object Function]"]=st["[object Map]"]=st[nt]=st[rt]=st[it]=st["[object Set]"]=st[ot]=st["[object WeakMap]"]=!1;var ut=Object.prototype,ct=ut.hasOwnProperty,ht=ut.toString,at=Math.pow(2,53)-1,lt=Object.keys||function(){var t=Object.prototype.hasOwnProperty,e=!{toString:null}.propertyIsEnumerable("toString"),n=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],r=n.length;return function(i){if("object"!=typeof i&&("function"!=typeof i||null===i))throw new TypeError("Object.keys called on non-object");var o,s,u=[];for(o in i)t.call(i,o)&&u.push(o);if(e)for(s=0;s<r;s++)t.call(i,n[s])&&u.push(n[s]);return u}}();var ft=y.internals.isObject=function(t){var e=typeof t;return!!t&&("object"===e||"function"===e)};function pt(t){return!!t&&"object"==typeof t}function dt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=at}var bt=function(){try{Object({toString:0}+"")}catch(t){return function(){return!1}}return function(t){return"function"!=typeof t.toString&&"string"==typeof(t+"")}}();var vt=Array.isArray||function(t){return pt(t)&&dt(t.length)&&ht.call(t)===Y};function _t(t,e){for(var n=-1,r=t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}function yt(t,e,n,r,i,o){var u,c=vt(t),h=vt(e),a=Y,l=Y;c||((a=ht.call(t))===X?a=rt:a!==rt&&(c=pt(u=t)&&dt(u.length)&&!!st[ht.call(u)])),h||(l=ht.call(e))===X&&(l=rt);var f=a===rt&&!bt(t),p=l===rt&&!bt(e),d=a===l;if(d&&!c&&!f)return function(t,e,n){switch(n){case Z:case tt:return+t==+e;case et:return t.name===e.name&&t.message===e.message;case nt:return t!==+t?e!==+e:t===+e;case it:case ot:return t===e+""}return!1}(t,e,a);if(!r){var b=f&&ct.call(t,"__wrapped__"),v=p&&ct.call(e,"__wrapped__");if(b||v)return n(b?t.value():t,v?e.value():e,r,i,o)}if(!d)return!1;i||(i=[]),o||(o=[]);for(var _=i.length;_--;)if(i[_]===t)return o[_]===e;i.push(t),o.push(e);var y=(c?function(t,e,n,r,i,o){var u=-1,c=t.length,h=e.length;if(c!==h&&!(r&&h>c))return!1;for(;++u<c;){var a=t[u],l=e[u];if(void 0!==s)return!1;if(r){if(!_t(e,function(t){return a===t||n(a,t,r,i,o)}))return!1}else if(a!==l&&!n(a,l,r,i,o))return!1}return!0}:function(t,e,n,r,i,o){var u=lt(t),c=u.length;if(c!==lt(e).length&&!r)return!1;for(var h,a=c;a--;)if(h=u[a],!(r?h in e:ct.call(e,h)))return!1;for(var l=r;++a<c;){var f=t[h=u[a]],p=e[h];if(!(void 0===s?n(f,p,r,i,o):void 0))return!1;l||(l="constructor"===h)}if(!l){var d=t.constructor,b=e.constructor;if(d!==b&&"constructor"in t&&"constructor"in e&&!("function"==typeof d&&d instanceof d&&"function"==typeof b&&b instanceof b))return!1}return!0})(t,e,n,r,i,o);return i.pop(),o.pop(),y}function wt(t,e,n,r,i){return t===e||(null==t||null==e||!ft(t)&&!pt(e)?t!=t&&e!=e:yt(t,e,wt,n,r,i))}var mt=y.internals.isEqual=function(t,e){return wt(t,e)},gt=(Array.prototype.slice,y.internals.inherits=function(t,e){function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n}),Et=y.internals.addProperties=function(t){for(var e=[],n=1,r=arguments.length;n<r;n++)e.push(arguments[n]);for(var i=0,o=e.length;i<o;i++){var s=e[i];for(var u in s)t[u]=s[u]}},Ct=y.internals.addRef=function(t,e){return new To(function(n){return new Vt(e.getDisposable(),t.subscribe(n))})};function xt(t,e){for(var n=new Array(t),r=0;r<t;r++)n[r]=e();return n}function St(t,e){this.id=t,this.value=e}St.prototype.compareTo=function(t){var e=this.value.compareTo(t.value);return 0===e&&(e=this.id-t.id),e};var Nt=y.internals.PriorityQueue=function(t){this.items=new Array(t),this.length=0},Dt=Nt.prototype;Dt.isHigherPriority=function(t,e){return this.items[t].compareTo(this.items[e])<0},Dt.percolate=function(t){if(!(t>=this.length||t<0)){var e=t-1>>1;if(!(e<0||e===t)&&this.isHigherPriority(t,e)){var n=this.items[t];this.items[t]=this.items[e],this.items[e]=n,this.percolate(e)}}},Dt.heapify=function(t){if(+t||(t=0),!(t>=this.length||t<0)){var e=2*t+1,n=2*t+2,r=t;if(e<this.length&&this.isHigherPriority(e,r)&&(r=e),n<this.length&&this.isHigherPriority(n,r)&&(r=n),r!==t){var i=this.items[t];this.items[t]=this.items[r],this.items[r]=i,this.heapify(r)}}},Dt.peek=function(){return this.items[0].value},Dt.removeAt=function(t){this.items[t]=this.items[--this.length],this.items[this.length]=s,this.heapify()},Dt.dequeue=function(){var t=this.peek();return this.removeAt(0),t},Dt.enqueue=function(t){var e=this.length++;this.items[e]=new St(Nt.count++,t),this.percolate(e)},Dt.remove=function(t){for(var e=0;e<this.length;e++)if(this.items[e].value===t)return this.removeAt(e),!0;return!1},Nt.count=0;var jt=y.CompositeDisposable=function(){var t,e,n=[];if(Array.isArray(arguments[0]))n=arguments[0];else for(e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];this.disposables=n,this.isDisposed=!1,this.length=n.length},At=jt.prototype;At.add=function(t){this.isDisposed?t.dispose():(this.disposables.push(t),this.length++)},At.remove=function(t){var e=!1;if(!this.isDisposed){var n=this.disposables.indexOf(t);-1!==n&&(e=!0,this.disposables.splice(n,1),this.length--,t.dispose())}return e},At.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;for(var t=this.disposables.length,e=new Array(t),n=0;n<t;n++)e[n]=this.disposables[n];for(this.disposables=[],this.length=0,n=0;n<t;n++)e[n].dispose()}};var kt=y.Disposable=function(t){this.isDisposed=!1,this.action=t||w};kt.prototype.dispose=function(){this.isDisposed||(this.action(),this.isDisposed=!0)};var Ot=kt.create=function(t){return new kt(t)},qt=kt.empty={dispose:w},Tt=kt.isDisposable=function(t){return t&&N(t.dispose)},Ft=kt.checkDisposed=function(t){if(t.isDisposed)throw new I},Pt=kt._fixup=function(t){return Tt(t)?t:qt},Mt=y.SingleAssignmentDisposable=function(){this.isDisposed=!1,this.current=null};Mt.prototype.getDisposable=function(){return this.current},Mt.prototype.setDisposable=function(t){if(this.current)throw new Error("Disposable has already been assigned");var e=this.isDisposed;!e&&(this.current=t),e&&t&&t.dispose()},Mt.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;var t=this.current;this.current=null,t&&t.dispose()}};var Rt=y.SerialDisposable=function(){this.isDisposed=!1,this.current=null};Rt.prototype.getDisposable=function(){return this.current},Rt.prototype.setDisposable=function(t){var e=this.isDisposed;if(!e){var n=this.current;this.current=t}n&&n.dispose(),e&&t&&t.dispose()},Rt.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;var t=this.current;this.current=null}t&&t.dispose()};var Vt=y.BinaryDisposable=function(t,e){this._first=t,this._second=e,this.isDisposed=!1};Vt.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;var t=this._first;this._first=null,t&&t.dispose();var e=this._second;this._second=null,e&&e.dispose()}};var Lt=y.NAryDisposable=function(t){this._disposables=t,this.isDisposed=!1};Lt.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;for(var t=0,e=this._disposables.length;t<e;t++)this._disposables[t].dispose();this._disposables.length=0}};var Wt=y.RefCountDisposable=function(){function t(t){this.disposable=t,this.disposable.count++,this.isInnerDisposed=!1}function e(t){this.underlyingDisposable=t,this.isDisposed=!1,this.isPrimaryDisposed=!1,this.count=0}return t.prototype.dispose=function(){this.disposable.isDisposed||this.isInnerDisposed||(this.isInnerDisposed=!0,this.disposable.count--,0===this.disposable.count&&this.disposable.isPrimaryDisposed&&(this.disposable.isDisposed=!0,this.disposable.underlyingDisposable.dispose()))},e.prototype.dispose=function(){this.isDisposed||this.isPrimaryDisposed||(this.isPrimaryDisposed=!0,0===this.count&&(this.isDisposed=!0,this.underlyingDisposable.dispose()))},e.prototype.getDisposable=function(){return this.isDisposed?qt:new t(this)},e}();function It(t,e){this.scheduler=t,this.disposable=e,this.isDisposed=!1}function Bt(t,e){e.isDisposed||(e.isDisposed=!0,e.disposable.dispose())}It.prototype.dispose=function(){this.scheduler.schedule(this,Bt)};var zt=y.internals.ScheduledItem=function(t,e,n,r,i){this.scheduler=t,this.state=e,this.action=n,this.dueTime=r,this.comparer=i||C,this.disposable=new Mt};zt.prototype.invoke=function(){this.disposable.setDisposable(this.invokeCore())},zt.prototype.compareTo=function(t){return this.comparer(this.dueTime,t.dueTime)},zt.prototype.isCancelled=function(){return this.disposable.isDisposed},zt.prototype.invokeCore=function(){return Pt(this.action(this.scheduler,this.state))};var Ut,Gt=y.Scheduler=function(){function t(){}t.isScheduler=function(e){return e instanceof t};var e=t.prototype;return e.schedule=function(t,e){throw new U},e.scheduleFuture=function(e,n,r){var i=n;return i instanceof Date&&(i-=this.now()),0===(i=t.normalize(i))?this.schedule(e,r):this._scheduleFuture(e,i,r)},e._scheduleFuture=function(t,e,n){throw new U},t.now=g,t.prototype.now=g,t.normalize=function(t){return t<0&&(t=0),t},t}(),Ht=Gt.normalize,Qt=Gt.isScheduler;!function(t){function e(t,e){var n=e[0],r=e[1],i=new jt;return r(n,function(e){var n=!1,s=!1;var u=t.schedule(e,function(t,e){n?i.remove(u):s=!0;return r(e,o),qt});s||(i.add(u),n=!0)}),i;function o(e){var n=false,s=false;var u=t.schedule(e,c);if(!s){i.add(u);n=true}function c(t,e){if(n){i.remove(u)}else{s=true}return r(e,o),qt}}}function n(t,e){var n=e[0],r=e[1],i=new jt;return r(n,function(e,n){var s=!1,u=!1;var c=t.scheduleFuture(e,n,function(t,e){s?i.remove(c):u=!0;return r(e,o),qt});u||(i.add(c),s=!0)}),i;function o(e,n){var s=false,u=false;var c=t.scheduleFuture(e,n,h);if(!u){i.add(c);s=true}function h(t,e){if(s){i.remove(c)}else{u=true}return r(e,o),qt}}}t.scheduleRecursive=function(t,n){return this.schedule([t,n],e)},t.scheduleRecursiveFuture=function(t,e,r){return this.scheduleFuture([t,r],e,n)}}(Gt.prototype),Gt.prototype.schedulePeriodic=function(t,e,n){if(void 0===_.setInterval)throw new z;e=Ht(e);var r=t,i=_.setInterval(function(){r=n(r)},e);return Ot(function(){_.clearInterval(i)})},(Ut=Gt.prototype).catchError=Ut.catch=function(t){return new se(this,t)};var Kt,Jt,$t=y.internals.SchedulePeriodicRecursive=function(){function t(t,e,n,r){this._scheduler=t,this._state=e,this._period=n,this._action=r}return t.prototype.start=function(){var t,e=new Mt;return this._cancel=e,e.setDisposable(this._scheduler.scheduleRecursiveFuture(0,this._period,(t=this,function(e,n){n(0,t._period);var r=A(t._action)(t._state);r===j&&(t._cancel.dispose(),k(r.e)),t._state=r}))),e},t}(),Xt=function(t){function e(){t.call(this)}return gt(e,t),e.prototype.schedule=function(t,e){return Pt(e(this,t))},e}(Gt),Yt=Gt.immediate=new Xt,Zt=function(t){var e;function n(){for(;e.length>0;){var t=e.dequeue();!t.isCancelled()&&t.invoke()}}function r(){t.call(this)}return gt(r,t),r.prototype.schedule=function(t,r){var i=new zt(this,t,r,this.now());if(e)e.enqueue(i);else{(e=new Nt(4)).enqueue(i);var o=A(n)();e=null,o===j&&k(o.e)}return i.disposable},r.prototype.scheduleRequired=function(){return!e},r}(Gt),te=Gt.currentThread=new Zt,ee=function(){var t,e=w;if(_.setTimeout)t=_.setTimeout,e=_.clearTimeout;else{if(!_.WScript)throw new z;t=function(t,e){_.WScript.Sleep(e),t()}}return{setTimeout:t,clearTimeout:e}}(),ne=ee.setTimeout,re=ee.clearTimeout;!function(){var t=1,e={},n=!1;function r(t){if(n)ne(function(){r(t)},0);else{var i=e[t];if(i){n=!0;var o=A(i)();Jt(t),n=!1,o===j&&k(o.e)}}}Jt=function(t){delete e[t]};var o=new RegExp("^"+String(toString).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/toString| for [^\]]+/g,".*?")+"$"),s="function"==typeof(s=f&&b&&f.setImmediate)&&!o.test(s)&&s;if(N(s))Kt=function(n){var i=t++;return e[i]=n,s(function(){r(i)}),i};else if(void 0!==i&&"[object process]"==={}.toString.call(i))Kt=function(n){var o=t++;return e[o]=n,i.nextTick(function(){r(o)}),o};else if(function(){if(!_.postMessage||_.importScripts)return!1;var t=!1,e=_.onmessage;return _.onmessage=function(){t=!0},_.postMessage("","*"),_.onmessage=e,t}()){var u="ms.rx.schedule"+Math.random();_.addEventListener("message",function(t){"string"==typeof t.data&&t.data.substring(0,u.length)===u&&r(t.data.substring(u.length))},!1),Kt=function(n){var r=t++;return e[r]=n,_.postMessage(u+r,"*"),r}}else if(_.MessageChannel){var c=new _.MessageChannel;c.port1.onmessage=function(t){r(t.data)},Kt=function(n){var r=t++;return e[r]=n,c.port2.postMessage(r),r}}else Kt="document"in _&&"onreadystatechange"in _.document.createElement("script")?function(n){var i=_.document.createElement("script"),o=t++;return e[o]=n,i.onreadystatechange=function(){r(o),i.onreadystatechange=null,i.parentNode.removeChild(i),i=null},_.document.documentElement.appendChild(i),o}:function(n){var i=t++;return e[i]=n,ne(function(){r(i)},0),i}}();var ie=function(t){function e(){t.call(this)}function n(t,e,n,r){return function(){t.setDisposable(kt._fixup(e(n,r)))}}function r(t){this._id=t,this.isDisposed=!1}function i(t){this._id=t,this.isDisposed=!1}return gt(e,t),r.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,Jt(this._id))},i.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,re(this._id))},e.prototype.schedule=function(t,e){var i=new Mt,o=Kt(n(i,e,this,t));return new Vt(i,new r(o))},e.prototype._scheduleFuture=function(t,e,r){if(0===e)return this.schedule(t,r);var o=new Mt,s=ne(n(o,r,this,t),e);return new Vt(o,new i(s))},e.prototype.scheduleLongRunning=function(t,e){var n=Ot(w);return Kt(function(t,e,n){return function(){e(t,n)}}(t,e,n)),n},e}(Gt),oe=Gt.default=Gt.async=new ie,se=function(t){function e(e,n){this._scheduler=e,this._handler=n,this._recursiveOriginal=null,this._recursiveWrapper=null,t.call(this)}return gt(e,t),e.prototype.schedule=function(t,e){return this._scheduler.schedule(t,this._wrap(e))},e.prototype._scheduleFuture=function(t,e,n){return this._scheduler.schedule(t,e,this._wrap(n))},e.prototype.now=function(){return this._scheduler.now()},e.prototype._clone=function(t){return new e(t,this._handler)},e.prototype._wrap=function(t){var e=this;return function(n,r){var i=A(t)(e._getRecursiveWrapper(n),r);return i===j?(e._handler(i.e)||k(i.e),qt):Pt(i)}},e.prototype._getRecursiveWrapper=function(t){if(this._recursiveOriginal!==t){this._recursiveOriginal=t;var e=this._clone(t);e._recursiveOriginal=t,e._recursiveWrapper=e,this._recursiveWrapper=e}return this._recursiveWrapper},e.prototype.schedulePeriodic=function(t,e,n){var r=this,i=!1,o=new Mt;return o.setDisposable(this._scheduler.schedulePeriodic(t,e,function(t){if(i)return null;var e=A(n)(t);return e===j?(i=!0,r._handler(e.e)||k(e.e),o.dispose(),null):e})),o},e}(Gt),ue=y.Notification=function(){function t(){}return t.prototype._accept=function(t,e,n){throw new U},t.prototype._acceptObserver=function(t,e,n){throw new U},t.prototype.accept=function(t,e,n){return t&&"object"==typeof t?this._acceptObserver(t):this._accept(t,e,n)},t.prototype.toObservable=function(t){var e=this;return Qt(t)||(t=Yt),new To(function(n){return t.schedule(e,function(t,e){e._acceptObserver(n),"N"===e.kind&&n.onCompleted()})})},t}(),ce=function(t){function e(t){this.value=t,this.kind="N"}return gt(e,ue),e.prototype._accept=function(t){return t(this.value)},e.prototype._acceptObserver=function(t){return t.onNext(this.value)},e.prototype.toString=function(){return"OnNext("+this.value+")"},e}(),he=function(t){function e(t){this.error=t,this.kind="E"}return gt(e,ue),e.prototype._accept=function(t,e){return e(this.error)},e.prototype._acceptObserver=function(t){return t.onError(this.error)},e.prototype.toString=function(){return"OnError("+this.error+")"},e}(),ae=function(t){function e(){this.kind="C"}return gt(e,ue),e.prototype._accept=function(t,e,n){return n()},e.prototype._acceptObserver=function(t){return t.onCompleted()},e.prototype.toString=function(){return"OnCompleted()"},e}(),le=ue.createOnNext=function(t){return new ce(t)},fe=ue.createOnError=function(t){return new he(t)},pe=ue.createOnCompleted=function(){return new ae},de=y.Observer=function(){};de.prototype.toNotifier=function(){var t=this;return function(e){return e.accept(t)}},de.prototype.asObserver=function(){var t=this;return new ye(function(e){t.onNext(e)},function(e){t.onError(e)},function(){t.onCompleted()})},de.prototype.checked=function(){return new we(this)};var be=de.create=function(t,e,n){return t||(t=w),e||(e=x),n||(n=w),new ye(t,e,n)};de.fromNotifier=function(t,e){var n=$(t,e,1);return new ye(function(t){return n(le(t))},function(t){return n(fe(t))},function(){return n(pe())})},de.prototype.notifyOn=function(t){return new ge(t,this)},de.prototype.makeSafe=function(t){return new AnonymousSafeObserver(this._onNext,this._onError,this._onCompleted,t)};var ve,_e=y.internals.AbstractObserver=function(t){function e(){this.isStopped=!1}return gt(e,de),e.prototype.next=G,e.prototype.error=G,e.prototype.completed=G,e.prototype.onNext=function(t){!this.isStopped&&this.next(t)},e.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.error(t))},e.prototype.onCompleted=function(){this.isStopped||(this.isStopped=!0,this.completed())},e.prototype.dispose=function(){this.isStopped=!0},e.prototype.fail=function(t){return!this.isStopped&&(this.isStopped=!0,this.error(t),!0)},e}(),ye=y.AnonymousObserver=function(t){function e(e,n,r){t.call(this),this._onNext=e,this._onError=n,this._onCompleted=r}return gt(e,t),e.prototype.next=function(t){this._onNext(t)},e.prototype.error=function(t){this._onError(t)},e.prototype.completed=function(){this._onCompleted()},e}(_e),we=function(t){function e(e){t.call(this),this._observer=e,this._state=0}gt(e,t);var n=e.prototype;return n.onNext=function(t){this.checkAccess();var e=A(this._observer.onNext).call(this._observer,t);this._state=0,e===j&&k(e.e)},n.onError=function(t){this.checkAccess();var e=A(this._observer.onError).call(this._observer,t);this._state=2,e===j&&k(e.e)},n.onCompleted=function(){this.checkAccess();var t=A(this._observer.onCompleted).call(this._observer);this._state=2,t===j&&k(t.e)},n.checkAccess=function(){if(1===this._state)throw new Error("Re-entrancy detected");if(2===this._state)throw new Error("Observer completed");0===this._state&&(this._state=1)},e}(de),me=y.internals.ScheduledObserver=function(t){function e(e,n){t.call(this),this.scheduler=e,this.observer=n,this.isAcquired=!1,this.hasFaulted=!1,this.queue=[],this.disposable=new Rt}function n(t,e){var n;if(t.queue.length>0){n=t.queue.shift();var r=A(n)();if(r===j)return t.queue=[],t.hasFaulted=!0,k(r.e);e(t)}else t.isAcquired=!1}return gt(e,t),e.prototype.next=function(t){this.queue.push(function(t,e){return function(){t.onNext(e)}}(this.observer,t))},e.prototype.error=function(t){this.queue.push(function(t,e){return function(){t.onError(e)}}(this.observer,t))},e.prototype.completed=function(){var t;this.queue.push((t=this.observer,function(){t.onCompleted()}))},e.prototype.ensureActive=function(){var t=!1;!this.hasFaulted&&this.queue.length>0&&(t=!this.isAcquired,this.isAcquired=!0),t&&this.disposable.setDisposable(this.scheduler.scheduleRecursive(this,n))},e.prototype.dispose=function(){t.prototype.dispose.call(this),this.disposable.dispose()},e}(_e),ge=function(t){function e(e,n,r){t.call(this,e,n),this._cancel=r}return gt(e,t),e.prototype.next=function(e){t.prototype.next.call(this,e),this.ensureActive()},e.prototype.error=function(e){t.prototype.error.call(this,e),this.ensureActive()},e.prototype.completed=function(){t.prototype.completed.call(this),this.ensureActive()},e.prototype.dispose=function(){t.prototype.dispose.call(this),this._cancel&&this._cancel.dispose(),this._cancel=null},e}(me),Ee=y.Observable=function(){function t(){if(y.config.longStackSupport&&O){var t=this._subscribe,e=A(k)(new Error).e;this.stack=e.stack.substring(e.stack.indexOf("\n")+1),this._subscribe=(n=this,r=t,function(t){var e=t.onError;return t.onError=function(r){M(r,n),e.call(t,r)},r.call(n,t)})}var n,r}return ve=t.prototype,t.isObservable=function(t){return t&&N(t.subscribe)},ve.subscribe=ve.forEach=function(t,e,n){return this._subscribe("object"==typeof t?t:be(t,e,n))},ve.subscribeOnNext=function(t,e){return this._subscribe(be(void 0!==e?function(n){t.call(e,n)}:t))},ve.subscribeOnError=function(t,e){return this._subscribe(be(null,void 0!==e?function(n){t.call(e,n)}:t))},ve.subscribeOnCompleted=function(t,e){return this._subscribe(be(null,null,void 0!==e?function(){t.call(e)}:t))},t}(),Ce=y.ObservableBase=function(t){function e(t,e){var n,r=e[0],i=e[1],o=A(i.subscribeCore).call(i,r);o!==j||r.fail(j.e)||k(j.e),r.setDisposable((n=o)&&N(n.dispose)?n:N(n)?Ot(n):qt)}function n(){t.call(this)}return gt(n,t),n.prototype._subscribe=function(t){var n=new Fo(t),r=[n,this];return te.scheduleRequired()?te.schedule(r,e):e(0,r),n},n.prototype.subscribeCore=G,n}(Ee),xe=y.FlatMapObservable=function(t){function e(e,n,r,i){this.resultSelector=N(r)?r:null,this.selector=$(N(n)?n:function(){return n},i,3),this.source=e,t.call(this)}function n(t,e,n,r){this.i=0,this.selector=e,this.resultSelector=n,this.source=r,this.o=t,_e.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this.selector,this.resultSelector,this))},gt(n,_e),n.prototype._wrapResult=function(t,e,n){return this.resultSelector?t.map(function(t,r){return this.resultSelector(e,t,n,r)},this):t},n.prototype.next=function(t){var e=this.i++,n=A(this.selector)(t,e,this.source);if(n===j)return this.o.onError(n.e);S(n)&&(n=Me(n)),(J(n)||K(n))&&(n=Ee.from(n)),this.o.onNext(this._wrapResult(n,t,e))},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.o.onCompleted()},e}(Ce),Se=y.internals.Enumerable=function(){};function Ne(t){this._s=t,this.isDisposed=!1}Ne.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._s.isDisposed=!0)};var De=function(t){function e(e){this.sources=e,t.call(this)}function n(t,e){if(!t.isDisposed){var n=A(t.e.next).call(t.e);if(n===j)return t.o.onError(n.e);if(n.done)return t.o.onCompleted();var i=n.value;S(i)&&(i=Me(i));var o=new Mt;t.subscription.setDisposable(o),o.setDisposable(i.subscribe(new r(t,e)))}}function r(t,e){this._state=t,this._recurse=e,_e.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Rt,r={isDisposed:!1,o:t,subscription:e,e:this.sources[H]()},i=te.scheduleRecursive(r,n);return new Lt([e,i,new Ne(r)])},gt(r,_e),r.prototype.next=function(t){this._state.o.onNext(t)},r.prototype.error=function(t){this._state.o.onError(t)},r.prototype.completed=function(){this._recurse(this._state)},e}(Ce);Se.prototype.concat=function(){return new De(this)};var je=function(t){function e(e){this.sources=e,t.call(this)}function n(t,e){if(!t.isDisposed){var n=A(t.e.next).call(t.e);if(n===j)return t.o.onError(n.e);if(n.done)return null!==t.lastError?t.o.onError(t.lastError):t.o.onCompleted();var i=n.value;S(i)&&(i=Me(i));var o=new Mt;t.subscription.setDisposable(o),o.setDisposable(i.subscribe(new r(t,e)))}}function r(t,e){this._state=t,this._recurse=e,_e.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Rt,r={isDisposed:!1,e:this.sources[H](),subscription:e,lastError:null,o:t},i=te.scheduleRecursive(r,n);return new Lt([e,i,new Ne(r)])},gt(r,_e),r.prototype.next=function(t){this._state.o.onNext(t)},r.prototype.error=function(t){this._state.lastError=t,this._recurse(this._state)},r.prototype.completed=function(){this._state.o.onCompleted()},e}(Ce);Se.prototype.catchError=function(){return new je(this)};var Ae=function(t){function e(t,e){this.v=t,this.c=null==e?-1:e}function n(t){this.v=t.v,this.l=t.c}return gt(e,Se),e.prototype[H]=function(){return new n(this)},n.prototype.next=function(){return 0===this.l?Q:(this.l>0&&this.l--,{done:!1,value:this.v})},e}(),ke=Se.repeat=function(t,e){return new Ae(t,e)},Oe=function(t){function e(t,e,n){this.s=t,this.fn=e?$(e,n,3):null}function n(t){this.i=-1,this.s=t.s,this.l=this.s.length,this.fn=t.fn}return gt(e,Se),e.prototype[H]=function(){return new n(this)},n.prototype.next=function(){return++this.i<this.l?{done:!1,value:this.fn?this.fn(this.s[this.i],this.i,this.s):this.s[this.i]}:Q},e}(),qe=Se.of=function(t,e,n){return new Oe(t,e,n)},Te=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new ge(this._s,t))},e}(Ce);ve.observeOn=function(t){return new Te(this,t)};var Fe=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}function n(t,e){var n=e[0],r=e[1],i=e[2];r.setDisposable(new It(t,n.subscribe(i)))}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Mt,r=new Rt;return r.setDisposable(e),e.setDisposable(this._s.schedule([this.source,r,t],n)),r},e}(Ce);ve.subscribeOn=function(t){return new Fe(this,t)};var Pe=function(t){function e(e,n){this._p=e,this._s=n,t.call(this)}function n(t,e){var n=e[0],r=e[1];n.onNext(r),n.onCompleted()}function r(t,e){var n=e[0],r=e[1];n.onError(r)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Mt,i=this,o=this._p;return N(o)&&(o=A(o)())===j?(t.onError(o.e),e):(o.then(function(r){e.setDisposable(i._s.schedule([t,r],n))},function(n){e.setDisposable(i._s.schedule([t,n],r))}),e)},e}(Ce),Me=Ee.fromPromise=function(t,e){return e||(e=oe),new Pe(t,e)};ve.toPromise=function(t){if(t||(t=y.config.Promise),!t)throw new z("Promise type not provided nor in Rx.config.Promise");var e=this;return new t(function(t,n){var r;e.subscribe(function(t){r=t},n,function(){t(r)})})};var Re=function(t){function e(e){this.source=e,t.call(this)}function n(t){this.o=t,this.a=[],_e.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t))},gt(n,_e),n.prototype.next=function(t){this.a.push(t)},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.o.onNext(this.a),this.o.onCompleted()},e}(Ce);ve.toArray=function(){return new Re(this)},Ee.create=function(t,e){return new To(t,e)};var Ve=function(t){function e(e){this._f=e,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=A(this._f)();return e===j?hn(e.e).subscribe(t):(S(e)&&(e=Me(e)),e.subscribe(t))},e}(Ce),Le=Ee.defer=function(t){return new Ve(t)},We=function(t){function e(e){this.scheduler=e,t.call(this)}function n(t,e){this.observer=t,this.scheduler=e}function r(t,e){return e.onCompleted(),qt}return gt(e,t),e.prototype.subscribeCore=function(t){return new n(t,this.scheduler).run()},n.prototype.run=function(){var t=this.observer;return this.scheduler===Yt?r(0,t):this.scheduler.schedule(t,r)},e}(Ce),Ie=new We(Yt),Be=Ee.empty=function(t){return Qt(t)||(t=Yt),t===Yt?Ie:new We(t)},ze=function(t){function e(e,n,r){this._iterable=e,this._fn=n,this._scheduler=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=function(t){var e=t[H];if(!e&&"string"==typeof t)return new Ge(t)[H]();if(!e&&t.length!==s)return new Qe(t)[H]();if(!e)throw new TypeError("Object is not iterable");return t[H]()}(Object(this._iterable));return this._scheduler.scheduleRecursive(0,function(t,e,n){return function(r,i){var o=A(e.next).call(e);if(o===j)return t.onError(o.e);if(o.done)return t.onCompleted();var s=o.value;if(N(n)&&(s=A(n)(s,r))===j)return t.onError(s.e);t.onNext(s),i(r+1)}}(t,e,this._fn))},e}(Ce),Ue=Math.pow(2,53)-1;function Ge(t){this._s=t}function He(t){this._s=t,this._l=t.length,this._i=0}function Qe(t){this._a=t}function Ke(t){this._a=t,this._l=function(t){var e=+t.length;if(isNaN(e))return 0;if(0===e||(n=e,"number"!=typeof n||!_.isFinite(n)))return e;var n;if((e=function(t){var e=+t;return 0===e?e:isNaN(e)?e:e<0?-1:1}(e)*Math.floor(Math.abs(e)))<=0)return 0;if(e>Ue)return Ue;return e}(t),this._i=0}Ge.prototype[H]=function(){return new He(this._s)},He.prototype[H]=function(){return this},He.prototype.next=function(){return this._i<this._l?{done:!1,value:this._s.charAt(this._i++)}:Q},Qe.prototype[H]=function(){return new Ke(this._a)},Ke.prototype[H]=function(){return this},Ke.prototype.next=function(){return this._i<this._l?{done:!1,value:this._a[this._i++]}:Q};var Je=Ee.from=function(t,e,n,r){if(null==t)throw new Error("iterable cannot be null.");if(e&&!N(e))throw new Error("mapFn when provided must be a function");if(e)var i=$(e,n,2);return Qt(r)||(r=te),new ze(t,i,r)},$e=function(t){function e(e,n){this._args=e,this._scheduler=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this._scheduler.scheduleRecursive(0,function(t,e){var n=e.length;return function(r,i){r<n?(t.onNext(e[r]),i(r+1)):t.onCompleted()}}(t,this._args))},e}(Ce),Xe=Ee.fromArray=function(t,e){return Qt(e)||(e=te),new $e(t,e)},Ye=function(t){function e(e,n,r,i,o){this._initialState=e,this._cndFn=n,this._itrFn=r,this._resFn=i,this._s=o,t.call(this)}function n(t,e){if(t.first)t.first=!1;else if(t.newState=A(t.self._itrFn)(t.newState),t.newState===j)return t.o.onError(t.newState.e);var n=A(t.self._cndFn)(t.newState);if(n===j)return t.o.onError(n.e);if(n){var r=A(t.self._resFn)(t.newState);if(r===j)return t.o.onError(r.e);t.o.onNext(r),e(t)}else t.o.onCompleted()}return gt(e,t),e.prototype.subscribeCore=function(t){var e={o:t,self:this,first:!0,newState:this._initialState};return this._s.scheduleRecursive(e,n)},e}(Ce);function Ze(t,e){return Qt(t)||(t=te),new $e(e,t)}Ee.generate=function(t,e,n,r,i){return Qt(i)||(i=te),new Ye(t,e,n,r,i)},Ee.of=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return new $e(e,te)},Ee.ofWithScheduler=function(t){for(var e=arguments.length,n=new Array(e-1),r=1;r<e;r++)n[r-1]=arguments[r];return new $e(n,t)},Ee.ofArrayChanges=function(t){if(!Array.isArray(t))throw new TypeError("Array.observe only accepts arrays.");if("function"!=typeof Array.observe&&"function"!=typeof Array.unobserve)throw new TypeError("Array.observe is not supported on your platform");return new To(function(e){function n(t){for(var n=0,r=t.length;n<r;n++)e.onNext(t[n])}return Array.observe(t,n),function(){Array.unobserve(t,n)}})},Ee.ofObjectChanges=function(t){if(null==t)throw new TypeError("object must not be null or undefined.");if("function"!=typeof Object.observe&&"function"!=typeof Object.unobserve)throw new TypeError("Object.observe is not supported on your platform");return new To(function(e){function n(t){for(var n=0,r=t.length;n<r;n++)e.onNext(t[n])}return Object.observe(t,n),function(){Object.unobserve(t,n)}})};var tn=new(function(t){function e(){t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return qt},e}(Ce)),en=Ee.never=function(){return tn},nn=function(t){function e(e,n){this._o=e,this._keys=Object.keys(e),this._scheduler=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this._scheduler.scheduleRecursive(0,function(t,e,n){return function(r,i){if(r<n.length){var o=n[r];t.onNext([o,e[o]]),i(r+1)}else t.onCompleted()}}(t,this._o,this._keys))},e}(Ce);Ee.pairs=function(t,e){return e||(e=te),new nn(t,e)};var rn=function(t){function e(e,n,r){this.start=e,this.rangeCount=n,this.scheduler=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.scheduler.scheduleRecursive(0,function(t,e,n){return function(r,i){r<e?(n.onNext(t+r),i(r+1)):n.onCompleted()}}(this.start,this.rangeCount,t))},e}(Ce);Ee.range=function(t,e,n){return Qt(n)||(n=te),new rn(t,e,n)};var on=function(t){function e(e,n,r){this.value=e,this.repeatCount=null==n?-1:n,this.scheduler=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return new sn(t,this).run()},e}(Ce);function sn(t,e){this.observer=t,this.parent=e}sn.prototype.run=function(){var t=this.observer,e=this.parent.value;return this.parent.scheduler.scheduleRecursive(this.parent.repeatCount,function(n,r){if((-1===n||n>0)&&(t.onNext(e),n>0&&n--),0===n)return t.onCompleted();r(n)})},Ee.repeat=function(t,e,n){return Qt(n)||(n=te),new on(t,e,n)};var un=function(t){function e(e,n){this._value=e,this._scheduler=n,t.call(this)}function n(t,e){var n=e[0],r=e[1];return r.onNext(n),r.onCompleted(),qt}return gt(e,t),e.prototype.subscribeCore=function(t){var e=[this._value,t];return this._scheduler===Yt?n(null,e):this._scheduler.schedule(e,n)},e}(Ce),cn=(Ee.return=Ee.just=function(t,e){return Qt(e)||(e=Yt),new un(t,e)},function(t){function e(e,n){this._error=e,this._scheduler=n,t.call(this)}function n(t,e){var n=e[0];return e[1].onError(n),qt}return gt(e,t),e.prototype.subscribeCore=function(t){var e=[this._error,t];return this._scheduler===Yt?n(null,e):this._scheduler.schedule(e,n)},e}(Ce)),hn=Ee.throw=function(t,e){return Qt(e)||(e=Yt),new cn(t,e)},an=function(t){function e(e,n){this._resFn=e,this._obsFn=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=qt,n=A(this._resFn)();if(n===j)return new Vt(hn(n.e).subscribe(t),e);n&&(e=n);var r=A(this._obsFn)(n);return new Vt(r===j?hn(r.e).subscribe(t):r.subscribe(t),e)},e}(Ce);Ee.using=function(t,e){return new an(t,e)},ve.amb=function(t){var e=this;return new To(function(n){var r,i="L",o="R",s=new Mt,u=new Mt;function c(){r||(r=i,u.dispose())}function h(){r||(r=o,s.dispose())}S(t)&&(t=Me(t));var a=be(function(t){c(),r===i&&n.onNext(t)},function(t){c(),r===i&&n.onError(t)},function(){c(),r===i&&n.onCompleted()}),l=be(function(t){h(),r===o&&n.onNext(t)},function(t){h(),r===o&&n.onError(t)},function(){h(),r===o&&n.onCompleted()});return s.setDisposable(e.subscribe(a)),u.setDisposable(t.subscribe(l)),new Vt(s,u)})},Ee.amb=function(){var t,e,n,r=en();if(Array.isArray(arguments[0]))t=arguments[0];else{var i=arguments.length;t=new Array(t);for(var o=0;o<i;o++)t[o]=arguments[o]}for(o=0,i=t.length;o<i;o++)e=r,n=t[o],r=e.amb(n);return r};var ln=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Mt,n=new Rt;return n.setDisposable(e),e.setDisposable(this.source.subscribe(new fn(t,n,this._fn))),n},e}(Ce),fn=function(t){function e(e,n,r){this._o=e,this._s=n,this._fn=r,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._o.onNext(t)},e.prototype.completed=function(){return this._o.onCompleted()},e.prototype.error=function(t){var e=A(this._fn)(t);if(e===j)return this._o.onError(e.e);S(e)&&(e=Me(e));var n=new Mt;this._s.setDisposable(n),n.setDisposable(e.subscribe(this._o))},e}(_e);ve.catch=function(t){return N(t)?new ln(this,t):pn([this,t])};var pn=Ee.catch=function(){var t;if(Array.isArray(arguments[0]))t=arguments[0];else{var e=arguments.length;t=new Array(e);for(var n=0;n<e;n++)t[n]=arguments[n]}return qe(t).catchError()};function dn(){return!1}function bn(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e}ve.combineLatest=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return Array.isArray(e[0])?e[0].unshift(this):e.unshift(this),yn.apply(this,e)};var vn=function(t){function e(e,n){this._params=e,this._cb=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){for(var e=this._params.length,n=new Array(e),r={hasValue:xt(e,dn),hasValueAll:!1,isDone:xt(e,dn),values:new Array(e)},i=0;i<e;i++){var o=this._params[i],s=new Mt;n[i]=s,S(o)&&(o=Me(o)),s.setDisposable(o.subscribe(new _n(t,i,this._cb,r)))}return new Lt(n)},e}(Ce),_n=function(t){function e(e,n,r,i){this._o=e,this._i=n,this._cb=r,this._state=i,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(this._state.values[this._i]=t,this._state.hasValue[this._i]=!0,this._state.hasValueAll||(this._state.hasValueAll=this._state.hasValue.every(m))){var e=A(this._cb).apply(null,this._state.values);if(e===j)return this._o.onError(e.e);this._o.onNext(e)}else this._state.isDone.filter((n=this._i,function(t,e){return e!==n})).every(m)&&this._o.onCompleted();var n},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._state.isDone[this._i]=!0,this._state.isDone.every(m)&&this._o.onCompleted()},e}(_e),yn=Ee.combineLatest=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=N(e[t-1])?e.pop():bn;return Array.isArray(e[0])&&(e=e[0]),new vn(e,r)};ve.concat=function(){for(var t=[],e=0,n=arguments.length;e<n;e++)t.push(arguments[e]);return t.unshift(this),gn.apply(null,t)};var wn=function(t){function e(e,n){this._s=e,this._fn=n,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._s.o.onNext(t)},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.i++,this._fn(this._s)},e}(_e),mn=function(t){function e(e){this._sources=e,t.call(this)}function n(t,e){if(!t.disposable.isDisposed){if(t.i===t.sources.length)return t.o.onCompleted();var n=t.sources[t.i];S(n)&&(n=Me(n));var r=new Mt;t.subscription.setDisposable(r),r.setDisposable(n.subscribe(new wn(t,e)))}}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Rt,r=Ot(w),i={o:t,i:0,subscription:e,disposable:r,sources:this._sources},o=Yt.scheduleRecursive(i,n);return new Lt([e,r,o])},e}(Ce),gn=Ee.concat=function(){var t;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(arguments.length);for(var e=0,n=arguments.length;e<n;e++)t[e]=arguments[e]}return new mn(t)};ve.concatAll=function(){return this.merge(1)};var En=function(t){function e(e,n){this.source=e,this.maxConcurrent=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new jt;return e.add(this.source.subscribe(new Cn(t,this.maxConcurrent,e))),e},e}(Ce),Cn=function(t){function e(e,n,r){this.o=e,this.max=n,this.g=r,this.done=!1,this.q=[],this.activeCount=0,t.call(this)}function n(e,n){this.parent=e,this.sad=n,t.call(this)}return gt(e,t),e.prototype.handleSubscribe=function(t){var e=new Mt;this.g.add(e),S(t)&&(t=Me(t)),e.setDisposable(t.subscribe(new n(this,e)))},e.prototype.next=function(t){this.activeCount<this.max?(this.activeCount++,this.handleSubscribe(t)):this.q.push(t)},e.prototype.error=function(t){this.o.onError(t)},e.prototype.completed=function(){this.done=!0,0===this.activeCount&&this.o.onCompleted()},gt(n,t),n.prototype.next=function(t){this.parent.o.onNext(t)},n.prototype.error=function(t){this.parent.o.onError(t)},n.prototype.completed=function(){this.parent.g.remove(this.sad),this.parent.q.length>0?this.parent.handleSubscribe(this.parent.q.shift()):(this.parent.activeCount--,this.parent.done&&0===this.parent.activeCount&&this.parent.o.onCompleted())},e}(_e);ve.merge=function(t){return"number"!=typeof t?xn(this,t):new En(this,t)};var xn=Ee.merge=function(){var t,e,n=[],r=arguments.length;if(arguments[0])if(Qt(arguments[0]))for(t=arguments[0],e=1;e<r;e++)n.push(arguments[e]);else for(t=Yt,e=0;e<r;e++)n.push(arguments[e]);else for(t=Yt,e=1;e<r;e++)n.push(arguments[e]);return Array.isArray(n[0])&&(n=n[0]),Ze(t,n).mergeAll()},Sn=function(t){function e(e){this.source=e,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new jt,n=new Mt;return e.add(n),n.setDisposable(this.source.subscribe(new Nn(t,e))),e},e}(Ce),Nn=function(t){function e(e,n){this.o=e,this.g=n,this.done=!1,t.call(this)}function n(e,n){this.parent=e,this.sad=n,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=new Mt;this.g.add(e),S(t)&&(t=Me(t)),e.setDisposable(t.subscribe(new n(this,e)))},e.prototype.error=function(t){this.o.onError(t)},e.prototype.completed=function(){this.done=!0,1===this.g.length&&this.o.onCompleted()},gt(n,t),n.prototype.next=function(t){this.parent.o.onNext(t)},n.prototype.error=function(t){this.parent.o.onError(t)},n.prototype.completed=function(){this.parent.g.remove(this.sad),this.parent.done&&1===this.parent.g.length&&this.parent.o.onCompleted()},e}(_e);ve.mergeAll=function(){return new Sn(this)};var Dn=y.CompositeError=function(t){this.innerErrors=t,this.message="This contains multiple errors. Check the innerErrors",Error.call(this)};Dn.prototype=Object.create(Error.prototype),Dn.prototype.name="CompositeError";var jn=function(t){function e(e){this.source=e,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new jt,n=new Mt,r={isStopped:!1,errors:[],o:t};return e.add(n),n.setDisposable(this.source.subscribe(new An(e,r))),e},e}(Ce),An=function(t){function e(e,n){this._group=e,this._state=n,t.call(this)}function n(t,e){0===e.length?t.onCompleted():1===e.length?t.onError(e[0]):t.onError(new Dn(e))}function r(e,n,r){this._inner=e,this._group=n,this._state=r,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=new Mt;this._group.add(e),S(t)&&(t=Me(t)),e.setDisposable(t.subscribe(new r(e,this._group,this._state)))},e.prototype.error=function(t){this._state.errors.push(t),this._state.isStopped=!0,1===this._group.length&&n(this._state.o,this._state.errors)},e.prototype.completed=function(){this._state.isStopped=!0,1===this._group.length&&n(this._state.o,this._state.errors)},gt(r,t),r.prototype.next=function(t){this._state.o.onNext(t)},r.prototype.error=function(t){this._state.errors.push(t),this._group.remove(this._inner),this._state.isStopped&&1===this._group.length&&n(this._state.o,this._state.errors)},r.prototype.completed=function(){this._group.remove(this._inner),this._state.isStopped&&1===this._group.length&&n(this._state.o,this._state.errors)},e}(_e);Ee.mergeDelayError=function(){var t;if(Array.isArray(arguments[0]))t=arguments[0];else{var e=arguments.length;t=new Array(e);for(var n=0;n<e;n++)t[n]=arguments[n]}var r=Ze(null,t);return new jn(r)},ve.onErrorResumeNext=function(t){if(!t)throw new Error("Second observable is required");return qn([this,t])};var kn=function(t){function e(e){this.sources=e,t.call(this)}function n(t,e){if(t.pos<t.sources.length){var n=t.sources[t.pos++];S(n)&&(n=Me(n));var r=new Mt;t.subscription.setDisposable(r),r.setDisposable(n.subscribe(new On(t,e)))}else t.o.onCompleted()}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Rt,r={pos:0,subscription:e,o:t,sources:this.sources},i=Yt.scheduleRecursive(r,n);return new Vt(e,i)},e}(Ce),On=function(t){function e(e,n){this._state=e,this._recurse=n,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._state.o.onNext(t)},e.prototype.error=function(){this._recurse(this._state)},e.prototype.completed=function(){this._recurse(this._state)},e}(_e),qn=Ee.onErrorResumeNext=function(){var t=[];if(Array.isArray(arguments[0]))t=arguments[0];else{var e=arguments.length;t=new Array(e);for(var n=0;n<e;n++)t[n]=arguments[n]}return new kn(t)},Tn=function(t){function e(e,n){this._s=e,this._o=S(n)?Me(n):n,this._open=!1,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Mt;e.setDisposable(this._s.subscribe(new Fn(t,this))),S(this._o)&&(this._o=Me(this._o));var n=new Mt;return n.setDisposable(this._o.subscribe(new Pn(t,this,n))),new Vt(e,n)},e}(Ce),Fn=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._p._open&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.onCompleted=function(){this._p._open&&this._o.onCompleted()},e}(_e),Pn=function(t){function e(e,n,r){this._o=e,this._p=n,this._r=r,t.call(this)}return gt(e,t),e.prototype.next=function(){this._p._open=!0,this._r.dispose()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.onCompleted=function(){this._r.dispose()},e}(_e);ve.skipUntil=function(t){return new Tn(this,t)};var Mn=function(t){function e(e){this.source=e,t.call(this)}function n(t,e){this.o=t,this.inner=e,this.stopped=!1,this.latest=0,this.hasLatest=!1,_e.call(this)}function r(t,e){this.parent=t,this.id=e,_e.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Rt,r=this.source.subscribe(new n(t,e));return new Vt(r,e)},gt(n,_e),n.prototype.next=function(t){var e=new Mt,n=++this.latest;this.hasLatest=!0,this.inner.setDisposable(e),S(t)&&(t=Me(t)),e.setDisposable(t.subscribe(new r(this,n)))},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.stopped=!0,!this.hasLatest&&this.o.onCompleted()},gt(r,_e),r.prototype.next=function(t){this.parent.latest===this.id&&this.parent.o.onNext(t)},r.prototype.error=function(t){this.parent.latest===this.id&&this.parent.o.onError(t)},r.prototype.completed=function(){this.parent.latest===this.id&&(this.parent.hasLatest=!1,this.parent.stopped&&this.parent.o.onCompleted())},e}(Ce);ve.switch=ve.switchLatest=function(){return new Mn(this)};var Rn=function(t){function e(e,n){this.source=e,this.other=S(n)?Me(n):n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return new Vt(this.source.subscribe(t),this.other.subscribe(new Vn(t)))},e}(Ce),Vn=function(t){function e(e){this._o=e,t.call(this)}return gt(e,t),e.prototype.next=function(){this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.onCompleted=w,e}(_e);function dn(){return!1}function bn(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e}ve.takeUntil=function(t){return new Rn(this,t)};var Ln=function(t){function e(e,n,r){this._s=e,this._ss=n,this._cb=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){for(var e=this._ss.length,n={hasValue:xt(e,dn),hasValueAll:!1,values:new Array(e)},r=this._ss.length,i=new Array(r+1),o=0;o<r;o++){var s=this._ss[o],u=new Mt;S(s)&&(s=Me(s)),u.setDisposable(s.subscribe(new Wn(t,o,n))),i[o]=u}var c=new Mt;return c.setDisposable(this._s.subscribe(new In(t,this._cb,n))),i[r]=c,new Lt(i)},e}(Ce),Wn=function(t){function e(e,n,r){this._o=e,this._i=n,this._state=r,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._state.values[this._i]=t,this._state.hasValue[this._i]=!0,this._state.hasValueAll=this._state.hasValue.every(m)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=w,e}(_e),In=function(t){function e(e,n,r){this._o=e,this._cb=n,this._state=r,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=[t].concat(this._state.values);if(this._state.hasValueAll){var n=A(this._cb).apply(null,e);if(n===j)return this._o.onError(n.e);this._o.onNext(n)}},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);function dn(){return!1}function Bn(){return[]}ve.withLatestFrom=function(){if(0===arguments.length)throw new Error("invalid arguments");for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=N(e[t-1])?e.pop():bn;return Array.isArray(e[0])&&(e=e[0]),new Ln(this,e,r)};var zn=function(t){function e(e,n){this._s=e,this._cb=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){for(var e=this._s.length,n=new Array(e),r=xt(e,dn),i=xt(e,Bn),o=0;o<e;o++){var s=this._s[o],u=new Mt;n[o]=u,S(s)&&(s=Me(s)),u.setDisposable(s.subscribe(new Un(t,o,this,i,r)))}return new Lt(n)},e}(Ce),Un=function(t){function e(e,n,r,i,o){this._o=e,this._i=n,this._p=r,this._q=i,this._d=o,t.call(this)}function n(t){return t.length>0}function r(t){return t.shift()}return gt(e,t),e.prototype.next=function(t){if(this._q[this._i].push(t),this._q.every(n)){var e=this._q.map(r),i=A(this._p._cb).apply(null,e);if(i===j)return this._o.onError(i.e);this._o.onNext(i)}else this._d.filter((o=this._i,function(t,e){return e!==o})).every(m)&&this._o.onCompleted();var o},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._d[this._i]=!0,this._d.every(m)&&this._o.onCompleted()},e}(_e);function dn(){return!1}function Bn(){return[]}function bn(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e}ve.zip=function(){if(0===arguments.length)throw new Error("invalid arguments");for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=N(e[t-1])?e.pop():bn;Array.isArray(e[0])&&(e=e[0]);return e.unshift(this),new zn(e,r)},Ee.zip=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];Array.isArray(e[0])&&(e=N(e[1])?e[0].concat(e[1]):e[0]);var r=e.shift();return r.zip.apply(r,e)};var Gn=function(t){function e(e,n){this.sources=e,this._cb=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){for(var e=this.sources,n=e.length,r=new Array(n),i={q:xt(n,Bn),done:xt(n,dn),cb:this._cb,o:t},o=0;o<n;o++)!function(t){var n=e[t],o=new Mt;(J(n)||K(n))&&(n=Je(n)),r[t]=o,o.setDisposable(n.subscribe(new Hn(i,t)))}(o);return new Lt(r)},e}(Ce),Hn=function(t){function e(e,n){this._s=e,this._i=n,t.call(this)}function n(t){return t.length>0}function r(t){return t.shift()}return gt(e,t),e.prototype.next=function(t){if(this._s.q[this._i].push(t),this._s.q.every(n)){var e=this._s.q.map(r),i=A(this._s.cb).apply(null,e);if(i===j)return this._s.o.onError(i.e);this._s.o.onNext(i)}else this._s.done.filter((o=this._i,function(t,e){return e!==o})).every(m)&&this._s.o.onCompleted();var o},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.done[this._i]=!0,this._s.done.every(m)&&this._s.o.onCompleted()},e}(_e);function Qn(t){return t.toArray()}function Kn(t){return t.length>0}ve.zipIterable=function(){if(0===arguments.length)throw new Error("invalid arguments");for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=N(e[t-1])?e.pop():bn;return e.unshift(this),new Gn(e,r)},ve.asObservable=function(){return new To((t=this,function(e){return t.subscribe(e)}),this);var t},ve.bufferWithCount=ve.bufferCount=function(t,e){return"number"!=typeof e&&(e=t),this.windowWithCount(t,e).flatMap(Qn).filter(Kn)};var Jn=function(t){function e(e){this.source=e,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new $n(t))},e}(Ce),$n=function(t){function e(e){this._o=e,t.call(this)}return gt(e,t),e.prototype.next=function(t){t.accept(this._o)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.dematerialize=function(){return new Jn(this)};var Xn=function(t){function e(e,n,r){this.source=e,this.keyFn=n,this.comparer=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Yn(t,this.keyFn,this.comparer))},e}(Ce),Yn=function(t){function e(e,n,r){this.o=e,this.keyFn=n,this.comparer=r,this.hasCurrentKey=!1,this.currentKey=null,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e,n=t;return N(this.keyFn)&&(n=A(this.keyFn)(t))===j?this.o.onError(n.e):this.hasCurrentKey&&(e=A(this.comparer)(this.currentKey,n))===j?this.o.onError(e.e):void(this.hasCurrentKey&&e||(this.hasCurrentKey=!0,this.currentKey=n,this.o.onNext(t)))},e.prototype.error=function(t){this.o.onError(t)},e.prototype.completed=function(){this.o.onCompleted()},e}(_e);ve.distinctUntilChanged=function(t,e){return e||(e=E),new Xn(this,t,e)};var Zn=function(t){function e(e,n,r,i){this.source=e,this._oN=n,this._oE=r,this._oC=i,t.call(this)}function n(t,e){this.o=t,this.t=!e._oN||N(e._oN)?be(e._oN||w,e._oE||w,e._oC||w):e._oN,this.isStopped=!1,_e.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this))},gt(n,_e),n.prototype.next=function(t){var e=A(this.t.onNext).call(this.t,t);e===j&&this.o.onError(e.e),this.o.onNext(t)},n.prototype.error=function(t){var e=A(this.t.onError).call(this.t,t);if(e===j)return this.o.onError(e.e);this.o.onError(t)},n.prototype.completed=function(){var t=A(this.t.onCompleted).call(this.t);if(t===j)return this.o.onError(t.e);this.o.onCompleted()},e}(Ce);ve.do=ve.tap=ve.doAction=function(t,e,n){return new Zn(this,t,e,n)},ve.doOnNext=ve.tapOnNext=function(t,e){return this.tap(void 0!==e?function(n){t.call(e,n)}:t)},ve.doOnError=ve.tapOnError=function(t,e){return this.tap(w,void 0!==e?function(n){t.call(e,n)}:t)},ve.doOnCompleted=ve.tapOnCompleted=function(t,e){return this.tap(w,null,void 0!==e?function(){t.call(e)}:t)};var tr=function(t){function e(e,n,r){this.source=e,this._fn=$(n,r,0),t.call(this)}function n(t,e){this.isDisposed=!1,this._s=t,this._fn=e}return gt(e,t),e.prototype.subscribeCore=function(t){var e=A(this.source.subscribe).call(this.source,t);return e===j&&(this._fn(),k(e.e)),new n(e,this._fn)},n.prototype.dispose=function(){if(!this.isDisposed){var t=A(this._s.dispose).call(this._s);this._fn(),t===j&&k(t.e)}},e}(Ce);ve.finally=function(t,e){return new tr(this,t,e)};var er=function(t){function e(e){this.source=e,t.call(this)}function n(t){this.o=t,this.isStopped=!1}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t))},n.prototype.onNext=w,n.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.o.onError(t))},n.prototype.onCompleted=function(){this.isStopped||(this.isStopped=!0,this.o.onCompleted())},n.prototype.dispose=function(){this.isStopped=!0},n.prototype.fail=function(t){return!this.isStopped&&(this.isStopped=!0,this.observer.onError(t),!0)},e}(Ce);ve.ignoreElements=function(){return new er(this)};var nr=function(t){function e(e,n){this.source=e,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new rr(t))},e}(Ce),rr=function(t){function e(e){this._o=e,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._o.onNext(le(t))},e.prototype.error=function(t){this._o.onNext(fe(t)),this._o.onCompleted()},e.prototype.completed=function(){this._o.onNext(pe()),this._o.onCompleted()},e}(_e);function ir(t){return{"@@iterator":function(){return{next:function(){return{done:!1,value:t}}}}}}ve.materialize=function(){return new nr(this)},ve.repeat=function(t){return ke(this,t).concat()},ve.retry=function(t){return ke(this,t).catchError()};var or=function(t){function e(t){return{isDisposed:!1,dispose:function(){this.isDisposed||(this.isDisposed=!0,t.isDisposed=!0)}}}function n(e,n){this.source=e,this._notifier=n,t.call(this)}return gt(n,t),n.prototype.subscribeCore=function(t){var n=new Ro,r=new Ro,i=this._notifier(n).subscribe(r),o=this.source["@@iterator"](),s={isDisposed:!1},u=new Rt,c=te.scheduleRecursive(null,function(e,i){if(!s.isDisposed){var c=o.next();if(c.done)t.onCompleted();else{var h=c.value;S(h)&&(h=Me(h));var a=new Mt,l=new Mt;u.setDisposable(new Vt(l,a)),a.setDisposable(h.subscribe(function(e){t.onNext(e)},function(e){l.setDisposable(r.subscribe(i,function(e){t.onError(e)},function(){t.onCompleted()})),n.onNext(e),a.dispose()},function(){t.onCompleted()}))}}});return new Lt([i,u,c,e(s)])},n}(Ce);function ir(t){return{"@@iterator":function(){return{next:function(){return{done:!1,value:t}}}}}}ve.retryWhen=function(t){return new or(ir(this),t)};var sr=function(t){function e(t){return{isDisposed:!1,dispose:function(){this.isDisposed||(this.isDisposed=!0,t.isDisposed=!0)}}}function n(e,n){this.source=e,this._notifier=n,t.call(this)}return gt(n,t),n.prototype.subscribeCore=function(t){var n=new Ro,r=new Ro,i=this._notifier(n).subscribe(r),o=this.source["@@iterator"](),s={isDisposed:!1},u=new Rt,c=te.scheduleRecursive(null,function(e,i){if(!s.isDisposed){var c=o.next();if(c.done)t.onCompleted();else{var h=c.value;S(h)&&(h=Me(h));var a=new Mt,l=new Mt;u.setDisposable(new Vt(l,a)),a.setDisposable(h.subscribe(function(e){t.onNext(e)},function(e){t.onError(e)},function(){l.setDisposable(r.subscribe(i,function(e){t.onError(e)},function(){t.onCompleted()})),n.onNext(null),a.dispose()}))}}});return new Lt([i,u,c,e(s)])},n}(Ce);ve.repeatWhen=function(t){return new sr(ir(this),t)};var ur=function(t){function e(e,n,r,i){this.source=e,this.accumulator=n,this.hasSeed=r,this.seed=i,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new cr(t,this))},e}(Ce),cr=function(t){function e(e,n){this._o=e,this._p=n,this._fn=n.accumulator,this._hs=n.hasSeed,this._s=n.seed,this._ha=!1,this._a=null,this._hv=!1,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(!this._hv&&(this._hv=!0),this._ha?this._a=A(this._fn)(this._a,t,this._i,this._p):(this._a=this._hs?A(this._fn)(this._s,t,this._i,this._p):t,this._ha=!0),this._a===j)return this._o.onError(this._a.e);this._o.onNext(this._a),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){!this._hv&&this._hs&&this._o.onNext(this._s),this._o.onCompleted()},e}(_e);ve.scan=function(){var t,e=!1,n=arguments[0];return 2===arguments.length&&(e=!0,t=arguments[1]),new ur(this,n,e,t)};var hr=function(t){function e(e,n){this.source=e,this._c=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new ar(t,this._c))},e}(Ce),ar=function(t){function e(e,n){this._o=e,this._c=n,this._q=[],t.call(this)}return gt(e,t),e.prototype.next=function(t){this._q.push(t),this._q.length>this._c&&this._o.onNext(this._q.shift())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.skipLast=function(t){if(t<0)throw new B;return new hr(this,t)},ve.startWith=function(){var t,e=0;arguments.length&&Qt(arguments[0])?(t=arguments[0],e=1):t=Yt;for(var n=[],r=e,i=arguments.length;r<i;r++)n.push(arguments[r]);return gn.apply(null,[Xe(n,t),this])};var lr=function(t){function e(e,n){this._o=e,this._c=n,this._q=[],t.call(this)}return gt(e,t),e.prototype.next=function(t){this._q.push(t),this._q.length>this._c&&this._q.shift()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){for(;this._q.length>0;)this._o.onNext(this._q.shift());this._o.onCompleted()},e}(_e);ve.takeLast=function(t){if(t<0)throw new B;var e=this;return new To(function(n){return e.subscribe(new lr(n,t))},e)};var fr=function(t){function e(e,n){this._o=e,this._c=n,this._q=[],t.call(this)}return gt(e,t),e.prototype.next=function(t){this._q.push(t),this._q.length>this._c&&this._q.shift()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._q),this._o.onCompleted()},e}(_e);function pr(t,e,n){var r=$(e,n,3);return t.map(function(e,n){var i=r(e,n,t);return S(i)&&(i=Me(i)),(J(i)||K(i))&&(i=Je(i)),i}).concatAll()}ve.takeLastBuffer=function(t){if(t<0)throw new B;var e=this;return new To(function(n){return e.subscribe(new fr(n,t))},e)},ve.windowWithCount=ve.windowCount=function(t,e){var n=this;if(+t||(t=0),Math.abs(t)===1/0&&(t=0),t<=0)throw new B;if(null==e&&(e=t),+e||(e=0),Math.abs(e)===1/0&&(e=0),e<=0)throw new B;return new To(function(r){var i=new Mt,o=new Wt(i),s=0,u=[];function c(){var t=new Ro;u.push(t),r.onNext(Ct(t,o))}return c(),i.setDisposable(n.subscribe(function(n){for(var r=0,i=u.length;r<i;r++)u[r].onNext(n);var o=s-t+1;o>=0&&o%e==0&&u.shift().onCompleted(),++s%e==0&&c()},function(t){for(;u.length>0;)u.shift().onError(t);r.onError(t)},function(){for(;u.length>0;)u.shift().onCompleted();r.onCompleted()})),o},n)},ve.selectConcat=ve.concatMap=function(t,e,n){return N(t)&&N(e)?this.concatMap(function(n,r){var i=t(n,r);return S(i)&&(i=Me(i)),(J(i)||K(i))&&(i=Je(i)),i.map(function(t,i){return e(n,t,r,i)})}):N(t)?pr(this,t,n):pr(this,function(){return t})},ve.concatMapObserver=ve.selectConcatObserver=function(t,e,n,r){var i=this,o=$(t,r,2),s=$(e,r,1),u=$(n,r,0);return new To(function(t){var e=0;return i.subscribe(function(n){var r;try{r=o(n,e++)}catch(e){return void t.onError(e)}S(r)&&(r=Me(r)),t.onNext(r)},function(e){var n;try{n=s(e)}catch(e){return void t.onError(e)}S(n)&&(n=Me(n)),t.onNext(n),t.onCompleted()},function(){var e;try{e=u()}catch(e){return void t.onError(e)}S(e)&&(e=Me(e)),t.onNext(e),t.onCompleted()})},this).concatAll()};var dr=function(t){function e(e,n){this._o=e,this._d=n,this._f=!1,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._f=!0,this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){!this._f&&this._o.onNext(this._d),this._o.onCompleted()},e}(_e);function br(t){this.comparer=t,this.set=[]}ve.defaultIfEmpty=function(t){var e=this;return t===s&&(t=null),new To(function(n){return e.subscribe(new dr(n,t))},e)},br.prototype.push=function(t){var e=-1===function(t,e,n){for(var r=0,i=t.length;r<i;r++)if(n(t[r],e))return r;return-1}(this.set,t,this.comparer);return e&&this.set.push(t),e};var vr=function(t){function e(e,n,r){this.source=e,this._keyFn=n,this._cmpFn=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new _r(t,this._keyFn,this._cmpFn))},e}(Ce),_r=function(t){function e(e,n,r){this._o=e,this._keyFn=n,this._h=new br(r),t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=t;if(N(this._keyFn)&&(e=A(this._keyFn)(t))===j)return this._o.onError(e.e);this._h.push(e)&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.distinct=function(t,e){return e||(e=E),new vr(this,t,e)},ve.groupBy=function(t,e){return this.groupByUntil(t,e,en)},ve.groupByUntil=function(t,e,n){var r=this;return new To(function(i){var o=new Wi,u=new jt,c=new Wt(u),h=function(t){return function(e){e.onError(t)}};return u.add(r.subscribe(function(r){var a=A(t)(r);if(a===j)return o.forEach(h(a.e)),i.onError(a.e);var l=!1,f=o.get(a);if(f===s&&(f=new Ro,o.set(a,f),l=!0),l){var p=new Mo(a,f,c),d=new Mo(a,f),b=A(n)(d);if(b===j)return o.forEach(h(b.e)),i.onError(b.e);i.onNext(p);var v=new Mt;u.add(v),v.setDisposable(b.take(1).subscribe(w,function(t){o.forEach(h(t)),i.onError(t)},function(){o.delete(a)&&f.onCompleted(),u.remove(v)}))}var _=r;if(N(e)&&(_=A(e)(r))===j)return o.forEach(h(_.e)),i.onError(_.e);f.onNext(_)},function(t){o.forEach(h(t)),i.onError(t)},function(){o.forEach(function(t){t.onCompleted()}),i.onCompleted()})),c},r)};var yr=function(t){function e(e,n,r){this.source=e,this.selector=$(n,r,3),t.call(this)}function n(t,e,n){this.o=t,this.selector=e,this.source=n,this.i=0,_e.call(this)}return gt(e,t),e.prototype.internalMap=function(t,n){return new e(this.source,function(t,e){return function(n,r,i){return t.call(this,e.selector(n,r,i),r,i)}}(t,this),n)},e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this.selector,this))},gt(n,_e),n.prototype.next=function(t){var e=A(this.selector)(t,this.i++,this.source);if(e===j)return this.o.onError(e.e);this.o.onNext(e)},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.o.onCompleted()},e}(Ce);ve.map=ve.select=function(t,e){var n="function"==typeof t?t:function(){return t};return this instanceof yr?this.internalMap(n,e):new yr(this,n,e)},ve.pluck=function(){var t=arguments.length,e=new Array(t);if(0===t)throw new Error("List of properties cannot be empty.");for(var n=0;n<t;n++)e[n]=arguments[n];return this.map(function(t,e){return function(n){for(var r=n,i=0;i<e;i++){var o=r[t[i]];if(void 0===o)return s;r=o}return r}}(e,t))},ve.flatMap=ve.selectMany=ve.mergeMap=function(t,e,n){return new xe(this,t,e,n).mergeAll()},ve.flatMapObserver=ve.selectManyObserver=function(t,e,n,r){var i=this;return new To(function(o){var s=0;return i.subscribe(function(e){var n;try{n=t.call(r,e,s++)}catch(t){return void o.onError(t)}S(n)&&(n=Me(n)),o.onNext(n)},function(t){var n;try{n=e.call(r,t)}catch(t){return void o.onError(t)}S(n)&&(n=Me(n)),o.onNext(n),o.onCompleted()},function(){var t;try{t=n.call(r)}catch(t){return void o.onError(t)}S(t)&&(t=Me(t)),o.onNext(t),o.onCompleted()})},i).mergeAll()},ve.flatMapLatest=ve.switchMap=function(t,e,n){return new xe(this,t,e,n).switchLatest()};var wr=function(t){function e(e,n){this.source=e,this._count=n,t.call(this)}function n(t,e){this._o=t,this._r=e,_e.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this._count))},gt(n,_e),n.prototype.next=function(t){this._r<=0?this._o.onNext(t):this._r--},n.prototype.error=function(t){this._o.onError(t)},n.prototype.completed=function(){this._o.onCompleted()},e}(Ce);ve.skip=function(t){if(t<0)throw new B;return new wr(this,t)};var mr=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new gr(t,this))},e}(Ce),gr=function(t){function e(e,n){this._o=e,this._p=n,this._i=0,this._r=!1,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(!this._r){var e=A(this._p._fn)(t,this._i++,this._p);if(e===j)return this._o.onError(e.e);this._r=!e}this._r&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.skipWhile=function(t,e){var n=$(t,e,3);return new mr(this,n)};var Er=function(t){function e(e,n){this.source=e,this._count=n,t.call(this)}function n(t,e){this._o=t,this._c=e,this._r=e,_e.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this._count))},gt(n,_e),n.prototype.next=function(t){this._r-- >0&&(this._o.onNext(t),this._r<=0&&this._o.onCompleted())},n.prototype.error=function(t){this._o.onError(t)},n.prototype.completed=function(){this._o.onCompleted()},e}(Ce);ve.take=function(t,e){if(t<0)throw new B;return 0===t?Be(e):new Er(this,t)};var Cr=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new xr(t,this))},e}(Ce),xr=function(t){function e(e,n){this._o=e,this._p=n,this._i=0,this._r=!0,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(this._r&&(this._r=A(this._p._fn)(t,this._i++,this._p),this._r===j))return this._o.onError(this._r.e);this._r?this._o.onNext(t):this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.takeWhile=function(t,e){var n=$(t,e,3);return new Cr(this,n)};var Sr=function(t){function e(e,n,r){this.source=e,this.predicate=$(n,r,3),t.call(this)}function n(t,e,n){this.o=t,this.predicate=e,this.source=n,this.i=0,_e.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this.predicate,this))},e.prototype.internalFilter=function(t,n){return new e(this.source,function(t,e){return function(n,r,i){return e.predicate(n,r,i)&&t.call(this,n,r,i)}}(t,this),n)},gt(n,_e),n.prototype.next=function(t){var e=A(this.predicate)(t,this.i++,this.source);if(e===j)return this.o.onError(e.e);e&&this.o.onNext(t)},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.o.onCompleted()},e}(Ce);ve.filter=ve.where=function(t,e){return this instanceof Sr?this.internalFilter(t,e):new Sr(this,t,e)};var Nr=function(t){function e(e,n,r){this.source=e,this._k=n,this._c=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Dr(t,this._k,this._c))},e}(Ce),Dr=function(t){function e(e,n,r){this._o=e,this._k=n,this._c=r,this._v=null,this._hv=!1,this._l=[],t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=A(this._k)(t);if(e===j)return this._o.onError(e.e);var n=0;if(this._hv){if((n=A(this._c)(e,this._v))===j)return this._o.onError(n.e)}else this._hv=!0,this._v=e;n>0&&(this._v=e,this._l=[]),n>=0&&this._l.push(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._l),this._o.onCompleted()},e}(_e);function jr(t){if(0===t.length)throw new W;return t[0]}var Ar=function(t){function e(e,n,r,i){this.source=e,this.accumulator=n,this.hasSeed=r,this.seed=i,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new kr(t,this))},e}(Ce),kr=function(t){function e(e,n){this._o=e,this._p=n,this._fn=n.accumulator,this._hs=n.hasSeed,this._s=n.seed,this._ha=!1,this._a=null,this._hv=!1,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(!this._hv&&(this._hv=!0),this._ha?this._a=A(this._fn)(this._a,t,this._i,this._p):(this._a=this._hs?A(this._fn)(this._s,t,this._i,this._p):t,this._ha=!0),this._a===j)return this._o.onError(this._a.e);this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv&&this._o.onNext(this._a),!this._hv&&this._hs&&this._o.onNext(this._s),!this._hv&&!this._hs&&this._o.onError(new W),this._o.onCompleted()},e}(_e);ve.reduce=function(){var t,e=!1,n=arguments[0];return 2===arguments.length&&(e=!0,t=arguments[1]),new Ar(this,n,e,t)};var Or=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new qr(t,this._fn,this.source))},e}(Ce),qr=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=A(this._fn)(t,this._i++,this._s);if(e===j)return this._o.onError(e.e);Boolean(e)&&(this._o.onNext(!0),this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!1),this._o.onCompleted()},e}(_e);ve.some=function(t,e){var n=$(t,e,3);return new Or(this,n)};var Tr=function(t){function e(e){this.source=e,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Fr(t))},e}(Ce),Fr=function(t){function e(e){this._o=e,t.call(this)}return gt(e,t),e.prototype.next=function(){this._o.onNext(!1),this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!0),this._o.onCompleted()},e}(_e);ve.isEmpty=function(){return new Tr(this)};var Pr=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Mr(t,this._fn,this.source))},e}(Ce),Mr=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=A(this._fn)(t,this._i++,this._s);if(e===j)return this._o.onError(e.e);Boolean(e)||(this._o.onNext(!1),this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!0),this._o.onCompleted()},e}(_e);ve.every=function(t,e){var n=$(t,e,3);return new Pr(this,n)};var Rr=function(t){function e(e,n,r){var i=+r||0;Math.abs(i)===1/0&&(i=0),this.source=e,this._elem=n,this._n=i,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this._n<0?(t.onNext(!1),t.onCompleted(),qt):this.source.subscribe(new Vr(t,this._elem,this._n))},e}(Ce),Vr=function(t){function e(e,n,r){this._o=e,this._elem=n,this._n=r,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e,n;this._i++>=this._n&&(e=t,n=this._elem,0===e&&0===n||e===n||isNaN(e)&&isNaN(n))&&(this._o.onNext(!0),this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!1),this._o.onCompleted()},e}(_e);ve.includes=function(t,e){return new Rr(this,t,e)};var Lr=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Wr(t,this._fn,this.source))},e}(Ce),Wr=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,this._c=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(this._fn){var e=A(this._fn)(t,this._i++,this._s);if(e===j)return this._o.onError(e.e);Boolean(e)&&this._c++}else this._c++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._c),this._o.onCompleted()},e}(_e);ve.count=function(t,e){var n=$(t,e,3);return new Lr(this,n)};var Ir=function(t){function e(e,n,r){this.source=e,this._e=n,this._n=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this._n<0?(t.onNext(-1),t.onCompleted(),qt):this.source.subscribe(new Br(t,this._e,this._n))},e}(Ce),Br=function(t){function e(e,n,r){this._o=e,this._e=n,this._n=r,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._i>=this._n&&t===this._e&&(this._o.onNext(this._i),this._o.onCompleted()),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(-1),this._o.onCompleted()},e}(_e);ve.indexOf=function(t,e){var n=+e||0;return Math.abs(n)===1/0&&(n=0),new Ir(this,t,n)};var zr=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Ur(t,this._fn,this.source))},e}(Ce),Ur=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,this._c=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(this._fn){var e=A(this._fn)(t,this._i++,this._s);if(e===j)return this._o.onError(e.e);this._c+=e}else this._c+=t},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._c),this._o.onCompleted()},e}(_e);ve.sum=function(t,e){var n=$(t,e,3);return new zr(this,n)},ve.minBy=function(t,e){return e||(e=C),new Nr(this,t,function(t,n){return-1*e(t,n)})},ve.min=function(t){return this.minBy(m,t).map(jr)},ve.maxBy=function(t,e){return e||(e=C),new Nr(this,t,e)},ve.max=function(t){return this.maxBy(m,t).map(jr)};var Gr=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Hr(t,this._fn,this.source))},e}(Ce),Hr=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._c=0,this._t=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(this._fn){var e=A(this._fn)(t,this._c++,this._s);if(e===j)return this._o.onError(e.e);this._t+=e}else this._c++,this._t+=t},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){if(0===this._c)return this._o.onError(new W);this._o.onNext(this._t/this._c),this._o.onCompleted()},e}(_e);ve.average=function(t,e){var n;return N(t)&&(n=$(t,e,3)),new Gr(this,n)},ve.sequenceEqual=function(t,e){var n=this;return e||(e=E),new To(function(r){var i=!1,o=!1,s=[],u=[],c=n.subscribe(function(t){if(u.length>0){var n=u.shift(),i=A(e)(n,t);if(i===j)return r.onError(i.e);i||(r.onNext(!1),r.onCompleted())}else o?(r.onNext(!1),r.onCompleted()):s.push(t)},function(t){r.onError(t)},function(){i=!0,0===s.length&&(u.length>0?(r.onNext(!1),r.onCompleted()):o&&(r.onNext(!0),r.onCompleted()))});(J(t)||K(t))&&(t=Je(t)),S(t)&&(t=Me(t));var h=t.subscribe(function(t){if(s.length>0){var n=s.shift(),o=A(e)(n,t);if(o===j)return r.onError(o.e);o||(r.onNext(!1),r.onCompleted())}else i?(r.onNext(!1),r.onCompleted()):u.push(t)},function(t){r.onError(t)},function(){o=!0,0===u.length&&(s.length>0?(r.onNext(!1),r.onCompleted()):i&&(r.onNext(!0),r.onCompleted()))});return new Vt(c,h)},n)};var Qr=function(t){function e(e,n,r){this.source=e,this._i=n,this._d=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Kr(t,this._i,this._d))},e}(Ce),Kr=function(t){function e(e,n,r){this._o=e,this._i=n,this._d=r,t.call(this)}return gt(e,t),e.prototype.next=function(t){0==this._i--&&(this._o.onNext(t),this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._d===s?this._o.onError(new B):(this._o.onNext(this._d),this._o.onCompleted())},e}(_e);ve.elementAt=function(t,e){if(t<0)throw new B;return new Qr(this,t,e)};var Jr=function(t){function e(e,n,r){this._o=e,this._obj=n,this._s=r,this._i=0,this._hv=!1,this._v=null,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=!1;if(this._obj.predicate){var n=A(this._obj.predicate)(t,this._i++,this._s);if(n===j)return this._o.onError(n.e);Boolean(n)&&(e=!0)}else this._obj.predicate||(e=!0);if(e){if(this._hv)return this._o.onError(new Error("Sequence contains more than one matching element"));this._hv=!0,this._v=t}},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv?(this._o.onNext(this._v),this._o.onCompleted()):this._obj.defaultValue===s?this._o.onError(new W):(this._o.onNext(this._obj.defaultValue),this._o.onCompleted())},e}(_e);ve.single=function(t,e){var n={},r=this;if(n="object"==typeof arguments[0]?arguments[0]:{predicate:arguments[0],thisArg:arguments[1],defaultValue:arguments[2]},N(n.predicate)){var i=n.predicate;n.predicate=$(i,n.thisArg,3)}return new To(function(t){return r.subscribe(new Jr(t,n,r))},r)};var $r=function(t){function e(e,n){this.source=e,this._obj=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Xr(t,this._obj,this.source))},e}(Ce),Xr=function(t){function e(e,n,r){this._o=e,this._obj=n,this._s=r,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(this._obj.predicate){var e=A(this._obj.predicate)(t,this._i++,this._s);if(e===j)return this._o.onError(e.e);Boolean(e)&&(this._o.onNext(t),this._o.onCompleted())}else this._obj.predicate||(this._o.onNext(t),this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._obj.defaultValue===s?this._o.onError(new W):(this._o.onNext(this._obj.defaultValue),this._o.onCompleted())},e}(_e);ve.first=function(){var t={};if(t="object"==typeof arguments[0]?arguments[0]:{predicate:arguments[0],thisArg:arguments[1],defaultValue:arguments[2]},N(t.predicate)){var e=t.predicate;t.predicate=$(e,t.thisArg,3)}return new $r(this,t)};var Yr=function(t){function e(e,n){this.source=e,this._obj=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Zr(t,this._obj,this.source))},e}(Ce),Zr=function(t){function e(e,n,r){this._o=e,this._obj=n,this._s=r,this._i=0,this._hv=!1,this._v=null,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=!1;if(this._obj.predicate){var n=A(this._obj.predicate)(t,this._i++,this._s);if(n===j)return this._o.onError(n.e);Boolean(n)&&(e=!0)}else this._obj.predicate||(e=!0);e&&(this._hv=!0,this._v=t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv?(this._o.onNext(this._v),this._o.onCompleted()):this._obj.defaultValue===s?this._o.onError(new W):(this._o.onNext(this._obj.defaultValue),this._o.onCompleted())},e}(_e);ve.last=function(){var t={};if(t="object"==typeof arguments[0]?arguments[0]:{predicate:arguments[0],thisArg:arguments[1],defaultValue:arguments[2]},N(t.predicate)){var e=t.predicate;t.predicate=$(e,t.thisArg,3)}return new Yr(this,t)};var ti=function(t){function e(e,n,r,i){this._o=e,this._s=n,this._cb=r,this._y=i,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=A(this._cb)(t,this._i,this._s);if(e===j)return this._o.onError(e.e);e?(this._o.onNext(this._y?this._i:t),this._o.onCompleted()):this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._y&&this._o.onNext(-1),this._o.onCompleted()},e}(_e);function ei(t,e,n,r){var i=$(e,n,3);return new To(function(e){return t.subscribe(new ti(e,t,i,r))},t)}ve.find=function(t,e){return ei(this,t,e,!1)},ve.findIndex=function(t,e){return ei(this,t,e,!0)};var ni=function(t){function e(e){this.source=e,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new ri(t))},e}(Ce),ri=function(t){function e(e){this._o=e,this._s=new _.Set,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._s.add(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._s),this._o.onCompleted()},e}(_e);ve.toSet=function(){if(void 0===_.Set)throw new TypeError;return new ni(this)};var ii=function(t){function e(e,n,r){this.source=e,this._k=n,this._e=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new oi(t,this._k,this._e))},e}(Ce),oi=function(t){function e(e,n,r){this._o=e,this._k=n,this._e=r,this._m=new _.Map,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=A(this._k)(t);if(e===j)return this._o.onError(e.e);var n=t;if(this._e&&(n=A(this._e)(t))===j)return this._o.onError(n.e);this._m.set(e,n)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._m),this._o.onCompleted()},e}(_e);ve.toMap=function(t,e){if(void 0===_.Map)throw new TypeError;return new ii(this,t,e)};var si=function(t){function e(e,n,r){this.source=e,this._b=n,this._e=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new ui(t,this._b,this._e))},e}(Ce),ui=function(t){function e(e,n,r){this._o=e,this._b=n,this._e=r,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._i>=this._b&&(this._e===this._i?this._o.onCompleted():this._o.onNext(t)),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.slice=function(t,e){var n=t||0;if(n<0)throw new y.ArgumentOutOfRangeError;if("number"==typeof e&&e<n)throw new y.ArgumentOutOfRangeError;return new si(this,n,e)};var ci=function(t){function e(e,n,r){this.source=e,this._e=n,this._n=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this._n<0?(t.onNext(-1),t.onCompleted(),qt):this.source.subscribe(new hi(t,this._e,this._n))},e}(Ce),hi=function(t){function e(e,n,r){this._o=e,this._e=n,this._n=r,this._v=0,this._hv=!1,this._i=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._i>=this._n&&t===this._e&&(this._hv=!0,this._v=this._i),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv?this._o.onNext(this._v):this._o.onNext(-1),this._o.onCompleted()},e}(_e);ve.lastIndexOf=function(t,e){var n=+e||0;return Math.abs(n)===1/0&&(n=0),new ci(this,t,n)},Ee.wrap=function(t){function e(){return Ee.spawn.call(this,t.apply(this,arguments))}return e.__generatorFunction__=t,e};var ai=Ee.spawn=function(){for(var t=arguments[0],e=this,n=[],r=1,i=arguments.length;r<i;r++)n.push(arguments[r]);return new To(function(r){var i=new jt;if(N(t)&&(t=t.apply(e,n)),!t||!N(t.next))return r.onNext(t),r.onCompleted();function o(e){var n=A(t.next).call(t,e);if(n===j)return r.onError(n.e);u(n)}function s(e){var n=A(t.next).call(t,e);if(n===j)return r.onError(n.e);u(n)}function u(t){if(t.done)return r.onNext(t.value),void r.onCompleted();var n=li.call(e,t.value),u=null,c=!1;Ee.isObservable(n)?i.add(n.subscribe(function(t){c=!0,u=t},s,function(){c&&o(u)})):s(new TypeError("type not supported"))}return o(),i})};function li(t){return t?Ee.isObservable(t)?t:S(t)?Ee.fromPromise(t):function(t){var e=t.constructor;if(!e)return!1;if("GeneratorFunction"===e.name||"GeneratorFunction"===e.displayName)return!0;return fi(e.prototype)}(t)||fi(t)?ai.call(this,t):N(t)?function(t){var e=this;return new To(function(n){t.call(e,function(){var t=arguments[0],e=arguments[1];if(t)return n.onError(t);if(arguments.length>2){for(var r=[],i=1,o=arguments.length;i<o;i++)r.push(arguments[i]);e=r}n.onNext(e),n.onCompleted()})})}.call(this,t):J(t)||K(t)?function(t){return Ee.from(t).concatMap(function(t){return Ee.isObservable(t)||ft(t)?li.call(null,t):y.Observable.just(t)}).toArray()}.call(this,t):ft(t)?function(t){for(var e=new t.constructor,n=Object.keys(t),r=[],i=0,o=n.length;i<o;i++){var u=n[i],c=li.call(this,t[u]);c&&Ee.isObservable(c)?h(c,u):e[u]=t[u]}return Ee.forkJoin.apply(Ee,r).map(function(){return e});function h(t,n){e[n]=s,r.push(t.map(function(t){e[n]=t}))}}.call(this,t):t:t}function fi(t){return N(t.next)&&N(t.throw)}function ft(t){return Object==t.constructor}Ee.start=function(t,e,n){return pi(t,e,n)()};var pi=Ee.toAsync=function(t,e,n){return Qt(n)||(n=oe),function(){var r=arguments,i=new Vo;return n.schedule(null,function(){var n;try{n=t.apply(e,r)}catch(t){return void i.onError(t)}i.onNext(n),i.onCompleted()}),i.asObservable()}};function di(t,e,n,r){var i=new Vo;return r.push(function(t,e,n){return function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];if(N(n)){if((i=A(n).apply(e,i))===j)return t.onError(i.e);t.onNext(i)}else i.length<=1?t.onNext(i[0]):t.onNext(i);t.onCompleted()}}(i,e,n)),t.apply(e,r),i.asObservable()}function bi(t,e,n,r){var i=new Vo;return r.push(function(t,e,n){return function(){var r=arguments[0];if(r)return t.onError(r);for(var i=arguments.length,o=[],s=1;s<i;s++)o[s-1]=arguments[s];if(N(n)){var o=A(n).apply(e,o);if(o===j)return t.onError(o.e);t.onNext(o)}else o.length<=1?t.onNext(o[0]):t.onNext(o);t.onCompleted()}}(i,e,n)),t.apply(e,r),i.asObservable()}function vi(t,e,n){this._e=t,this._n=e,this._fn=n,this._e.addEventListener(this._n,this._fn,!1),this.isDisposed=!1}function _i(t,e,n){var r=new jt,i=Object.prototype.toString.call(t);if(function(t){return _.StaticNodeList?t instanceof _.StaticNodeList||t instanceof _.NodeList:"[object NodeList]"===Object.prototype.toString.call(t)}(t)||"[object HTMLCollection]"===i)for(var o=0,s=t.length;o<s;o++)r.add(_i(t.item(o),e,n));else t&&r.add(new vi(t,e,n));return r}Ee.fromCallback=function(t,e,n){return function(){void 0===e&&(e=this);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return di(t,e,n,i)}},Ee.fromNodeCallback=function(t,e,n){return function(){void 0===e&&(e=this);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return bi(t,e,n,i)}},vi.prototype.dispose=function(){this.isDisposed||(this._e.removeEventListener(this._n,this._fn,!1),this.isDisposed=!0)},y.config.useNativeEvents=!1;var yi=function(t){function e(e,n,r){this._el=e,this._n=n,this._fn=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return _i(this._el,this._n,function(t,e){return function(){var n=arguments[0];if(N(e)&&(n=A(e).apply(null,arguments))===j)return t.onError(n.e);t.onNext(n)}}(t,this._fn))},e}(Ce);Ee.fromEvent=function(t,e,n){return t.addListener?mi(function(n){t.addListener(e,n)},function(n){t.removeListener(e,n)},n):y.config.useNativeEvents||"function"!=typeof t.on||"function"!=typeof t.off?new yi(t,e,n).publish().refCount():mi(function(n){t.on(e,n)},function(n){t.off(e,n)},n)};var wi=function(t){function e(e,n,r){this._add=e,this._del=n,this._fn=r,t.call(this)}function n(t,e,n){this._del=t,this._fn=e,this._ret=n,this.isDisposed=!1}return gt(e,t),e.prototype.subscribeCore=function(t){var e=function(t,e){return function(){var n=arguments[0];if(N(e)&&(n=A(e).apply(null,arguments))===j)return t.onError(n.e);t.onNext(n)}}(t,this._fn),r=this._add(e);return new n(this._del,e,r)},n.prototype.dispose=function(){this.isDisposed||(N(this._del)&&this._del(this._fn,this._ret),this.isDisposed=!0)},e}(Ce),mi=Ee.fromEventPattern=function(t,e,n){return new wi(t,e,n).publish().refCount()};Ee.startAsync=function(t){var e=A(t)();return e===j?hn(e.e):Me(e)};var gi=function(t){function e(e,n){this.source=e,this.controller=new Ro,this.paused=!0,n&&n.subscribe?this.pauser=this.controller.merge(n):this.pauser=this.controller,t.call(this)}return gt(e,t),e.prototype._subscribe=function(t){var e=this.source.publish(),n=e.subscribe(t),r=qt,i=this.pauser.startWith(!this.paused).distinctUntilChanged().subscribe(function(t){t?r=e.connect():(r.dispose(),r=qt)});return new Lt([n,r,i])},e.prototype.pause=function(){this.paused=!0,this.controller.onNext(!1)},e.prototype.resume=function(){this.paused=!1,this.controller.onNext(!0)},e}(Ee);ve.pausable=function(t){return new gi(this,t)};var Ei=function(t){function e(e,n){this.source=e,this.controller=new Ro,this.paused=!0,n&&n.subscribe?this.pauser=this.controller.merge(n):this.pauser=this.controller,t.call(this)}return gt(e,t),e.prototype._subscribe=function(t){var e,n,r,i,o=[];function u(){for(;o.length>0;)t.onNext(o.shift())}return(n=this.source,r=this.pauser.startWith(!this.paused).distinctUntilChanged(),i=function(t,e){return{data:t,shouldFire:e}},new To(function(t){var e,o=[!1,!1],s=!1,u=!1,c=new Array(2);function h(n,r){if(c[r]=n,o[r]=!0,s||(s=o.every(m))){if(e)return t.onError(e);var h=A(i).apply(null,c);if(h===j)return t.onError(h.e);t.onNext(h)}u&&c[1]&&t.onCompleted()}return new Vt(n.subscribe(function(t){h(t,0)},function(n){c[1]?t.onError(n):e=n},function(){u=!0,c[1]&&t.onCompleted()}),r.subscribe(function(t){h(t,1)},function(e){t.onError(e)},function(){u=!0,h(!0,1)}))},n)).subscribe(function(n){e!==s&&n.shouldFire!==e?(e=n.shouldFire,n.shouldFire&&u()):(e=n.shouldFire,n.shouldFire?t.onNext(n.data):o.push(n.data))},function(e){u(),t.onError(e)},function(){u(),t.onCompleted()})},e.prototype.pause=function(){this.paused=!0,this.controller.onNext(!1)},e.prototype.resume=function(){this.paused=!1,this.controller.onNext(!0)},e}(Ee);ve.pausableBuffered=function(t){return new Ei(this,t)};var Ci=function(t){function e(e,n,r){t.call(this),this.subject=new xi(n,r),this.source=e.multicast(this.subject).refCount()}return gt(e,t),e.prototype._subscribe=function(t){return this.source.subscribe(t)},e.prototype.request=function(t){return this.subject.request(null==t?-1:t)},e}(Ee),xi=function(t){function e(e,n){null==e&&(e=!0),t.call(this),this.subject=new Ro,this.enableQueue=e,this.queue=e?[]:null,this.requestedCount=0,this.requestedDisposable=null,this.error=null,this.hasFailed=!1,this.hasCompleted=!1,this.scheduler=n||te}return gt(e,t),Et(e.prototype,de,{_subscribe:function(t){return this.subject.subscribe(t)},onCompleted:function(){this.hasCompleted=!0,this.enableQueue&&0!==this.queue.length?this.queue.push(ue.createOnCompleted()):(this.subject.onCompleted(),this.disposeCurrentRequest())},onError:function(t){this.hasFailed=!0,this.error=t,this.enableQueue&&0!==this.queue.length?this.queue.push(ue.createOnError(t)):(this.subject.onError(t),this.disposeCurrentRequest())},onNext:function(t){this.requestedCount<=0?this.enableQueue&&this.queue.push(ue.createOnNext(t)):(0==this.requestedCount--&&this.disposeCurrentRequest(),this.subject.onNext(t))},_processRequest:function(t){if(this.enableQueue)for(;this.queue.length>0&&(t>0||"N"!==this.queue[0].kind);){var e=this.queue.shift();e.accept(this.subject),"N"===e.kind?t--:(this.disposeCurrentRequest(),this.queue=[])}return t},request:function(t){this.disposeCurrentRequest();var e=this;return this.requestedDisposable=this.scheduler.schedule(t,function(t,n){var r=e._processRequest(n);if(!(e.hasCompleted||e.hasFailed)&&r>0)return e.requestedCount=r,Ot(function(){e.requestedCount=0})}),this.requestedDisposable},disposeCurrentRequest:function(){this.requestedDisposable&&(this.requestedDisposable.dispose(),this.requestedDisposable=null)}}),e}(Ee);ve.controlled=function(t,e){return t&&Qt(t)&&(e=t,t=!0),null==t&&(t=!0),new Ci(this,t,e)};var Si=function(t){function e(e){t.call(this),this.source=e}function n(t,e){return e.source.request(1)}gt(e,t),e.prototype._subscribe=function(t){return this.subscription=this.source.subscribe(new r(t,this,this.subscription)),new Vt(this.subscription,oe.schedule(this,n))};var r=function(t){function e(e,n,r){t.call(this),this.observer=e,this.observable=n,this.cancel=r,this.scheduleDisposable=null}function n(t,e){return e.observable.source.request(1)}return gt(e,t),e.prototype.completed=function(){this.observer.onCompleted(),this.dispose()},e.prototype.error=function(t){this.observer.onError(t),this.dispose()},e.prototype.next=function(t){this.observer.onNext(t),this.scheduleDisposable=oe.schedule(this,n)},e.dispose=function(){this.observer=null,this.cancel&&(this.cancel.dispose(),this.cancel=null),this.scheduleDisposable&&(this.scheduleDisposable.dispose(),this.scheduleDisposable=null),t.prototype.dispose.call(this)},e}(_e);return e}(Ee);Ci.prototype.stopAndWait=function(){return new Si(this)};var Ni=function(t){function e(e,n){t.call(this),this.source=e,this.windowSize=n}function n(t,e){return e.source.request(e.windowSize)}gt(e,t),e.prototype._subscribe=function(t){return this.subscription=this.source.subscribe(new r(t,this,this.subscription)),new Vt(this.subscription,oe.schedule(this,n))};var r=function(t){function e(e,n,r){this.observer=e,this.observable=n,this.cancel=r,this.received=0,this.scheduleDisposable=null,t.call(this)}function n(t,e){return e.observable.source.request(e.observable.windowSize)}return gt(e,t),e.prototype.completed=function(){this.observer.onCompleted(),this.dispose()},e.prototype.error=function(t){this.observer.onError(t),this.dispose()},e.prototype.next=function(t){this.observer.onNext(t),this.received=++this.received%this.observable.windowSize,0===this.received&&(this.scheduleDisposable=oe.schedule(this,n))},e.prototype.dispose=function(){this.observer=null,this.cancel&&(this.cancel.dispose(),this.cancel=null),this.scheduleDisposable&&(this.scheduleDisposable.dispose(),this.scheduleDisposable=null),t.prototype.dispose.call(this)},e}(_e);return e}(Ee);Ci.prototype.windowed=function(t){return new Ni(this,t)},ve.pipe=function(t){var e=this.pausableBuffered();function n(){e.resume()}return t.addListener("drain",n),e.subscribe(function(n){!t.write(n)&&e.pause()},function(e){t.emit("error",e)},function(){!t._isStdio&&t.end(),t.removeListener("drain",n)}),e.resume(),t};var Di=function(t){function e(e,n,r){this.source=e,this._fn1=n,this._fn2=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=this.source.multicast(this._fn1());return new Vt(this._fn2(e).subscribe(t),e.connect())},e}(Ce);ve.multicast=function(t,e){return N(t)?new Di(this,t,e):new ki(this,t)},ve.publish=function(t){return t&&N(t)?this.multicast(function(){return new Ro},t):this.multicast(new Ro)},ve.share=function(){return this.publish().refCount()},ve.publishLast=function(t){return t&&N(t)?this.multicast(function(){return new Vo},t):this.multicast(new Vo)},ve.publishValue=function(t,e){return 2===arguments.length?this.multicast(function(){return new Lo(e)},t):this.multicast(new Lo(t))},ve.shareValue=function(t){return this.publishValue(t).refCount()},ve.replay=function(t,e,n,r){return t&&N(t)?this.multicast(function(){return new Wo(e,n,r)},t):this.multicast(new Wo(e,n,r))},ve.shareReplay=function(t,e,n){return this.replay(null,t,e,n).refCount()};var ji=function(t,e){this._s=t,this._o=e};ji.prototype.dispose=function(){if(!this._s.isDisposed&&null!==this._o){var t=this._s.observers.indexOf(this._o);this._s.observers.splice(t,1),this._o=null}};var Ai=function(t){function e(e){this.source=e,this._count=0,this._connectableSubscription=null,t.call(this)}function n(t,e){this._p=t,this._s=e,this.isDisposed=!1}return gt(e,t),e.prototype.subscribeCore=function(t){var e=this.source.subscribe(t);return 1==++this._count&&(this._connectableSubscription=this.source.connect()),new n(this,e)},n.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._s.dispose(),0==--this._p._count&&this._p._connectableSubscription.dispose())},e}(Ce),ki=y.ConnectableObservable=function(t){function e(e,n){this.source=e,this._connection=null,this._source=e.asObservable(),this._subject=n,t.call(this)}function n(t,e){this._p=t,this._s=e}return gt(e,t),n.prototype.dispose=function(){this._s&&(this._s.dispose(),this._s=null,this._p._connection=null)},e.prototype.connect=function(){if(!this._connection){if(this._subject.isStopped)return qt;var t=this._source.subscribe(this._subject);this._connection=new n(this,t)}return this._connection},e.prototype._subscribe=function(t){return this._subject.subscribe(t)},e.prototype.refCount=function(){return new Ai(this)},e}(Ee);function Qn(t){return t.toArray()}ve.singleInstance=function(){var t,e=this,n=!1;return new To(function(r){return(n||(n=!0,t=e.finally(function(){n=!1}).publish().refCount()),t).subscribe(r)})},ve.join=function(t,e,n,r){var i=this;return new To(function(o){var s=new jt,u=!1,c=!1,h=0,a=0,l=new Wi,f=new Wi,p=function(t){o.onError(t)};return s.add(i.subscribe(function(t){var n=h++,i=new Mt;l.set(n,t),s.add(i);var c=A(e)(t);if(c===j)return o.onError(c.e);i.setDisposable(c.take(1).subscribe(w,p,function(){l.delete(n)&&0===l.size&&u&&o.onCompleted(),s.remove(i)})),f.forEach(function(e){var n=A(r)(t,e);if(n===j)return o.onError(n.e);o.onNext(n)})},p,function(){u=!0,(c||0===l.size)&&o.onCompleted()})),s.add(t.subscribe(function(t){var e=a++,i=new Mt;f.set(e,t),s.add(i);var u=A(n)(t);if(u===j)return o.onError(u.e);i.setDisposable(u.take(1).subscribe(w,p,function(){f.delete(e)&&0===f.size&&c&&o.onCompleted(),s.remove(i)})),l.forEach(function(e){var n=A(r)(e,t);if(n===j)return o.onError(n.e);o.onNext(n)})},p,function(){c=!0,(u||0===f.size)&&o.onCompleted()})),s},i)},ve.groupJoin=function(t,e,n,r){var i=this;return new To(function(o){var s=new jt,u=new Wt(s),c=new Wi,h=new Wi,a=0,l=0,f=function(t){return function(e){e.onError(t)}};function f(t){}return s.add(i.subscribe(function(t){var n=new Ro,i=a++;c.set(i,n);var l=A(r)(t,Ct(n,u));if(l===j)return c.forEach(f(l.e)),o.onError(l.e);o.onNext(l),h.forEach(function(t){n.onNext(t)});var p=new Mt;s.add(p);var d=A(e)(t);if(d===j)return c.forEach(f(d.e)),o.onError(d.e);p.setDisposable(d.take(1).subscribe(w,function(t){c.forEach(f(t)),o.onError(t)},function(){c.delete(i)&&n.onCompleted(),s.remove(p)}))},function(t){c.forEach(f(t)),o.onError(t)},function(){o.onCompleted()})),s.add(t.subscribe(function(t){var e=l++;h.set(e,t);var r=new Mt;s.add(r);var i=A(n)(t);if(i===j)return c.forEach(f(i.e)),o.onError(i.e);r.setDisposable(i.take(1).subscribe(w,function(t){c.forEach(f(t)),o.onError(t)},function(){h.delete(e),s.remove(r)})),c.forEach(function(e){e.onNext(t)})},function(t){c.forEach(f(t)),o.onError(t)})),u},i)},ve.buffer=function(){return this.window.apply(this,arguments).flatMap(Qn)},ve.window=function(t,e){return 1===arguments.length&&"function"!=typeof arguments[0]?function(t){var e=this;return new To(function(n){var r=new Ro,i=new jt,o=new Wt(i);return n.onNext(Ct(r,o)),i.add(e.subscribe(function(t){r.onNext(t)},function(t){r.onError(t),n.onError(t)},function(){r.onCompleted(),n.onCompleted()})),S(t)&&(t=Me(t)),i.add(t.subscribe(function(t){r.onCompleted(),r=new Ro,n.onNext(Ct(r,o))},function(t){r.onError(t),n.onError(t)},function(){r.onCompleted(),n.onCompleted()})),o},e)}.call(this,t):"function"==typeof t?function(t){var e=this;return new To(function(n){var r=new Rt,i=new jt(r),o=new Wt(i),s=new Ro;return n.onNext(Ct(s,o)),i.add(e.subscribe(function(t){s.onNext(t)},function(t){s.onError(t),n.onError(t)},function(){s.onCompleted(),n.onCompleted()})),function e(){var i;try{i=t()}catch(t){return void n.onError(t)}S(i)&&(i=Me(i));var u=new Mt;r.setDisposable(u);u.setDisposable(i.take(1).subscribe(w,function(t){s.onError(t),n.onError(t)},function(){s.onCompleted(),s=new Ro,n.onNext(Ct(s,o)),e()}))}(),o},e)}.call(this,t):function(t,e){return t.groupJoin(this,e,Be,function(t,e){return e})}.call(this,t,e)};var Oi=function(t){function e(e){this.source=e,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new qi(t))},e}(Ce),qi=function(t){function e(e){this._o=e,this._p=null,this._hp=!1,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._hp?this._o.onNext([this._p,t]):this._hp=!0,this._p=t},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.pairwise=function(){return new Oi(this)},ve.partition=function(t,e){var n=$(t,e,3);return[this.filter(t,e),this.filter(function(t,e,r){return!n(t,e,r)})]};var Ti=function(t){function e(t,e){this.c=t,this.s=e}return gt(e,Se),e.prototype[H]=function(){var t=this;return{next:function(){return t.c()?{done:!1,value:t.s}:{done:!0,value:void 0}}}},e}();ve.letBind=ve.let=function(t){return t(this)},Ee.if=function(t,e,n){return Le(function(){return n||(n=Be()),S(e)&&(e=Me(e)),S(n)&&(n=Me(n)),"function"==typeof n.now&&(n=Be(n)),t()?e:n})},Ee.for=Ee.forIn=function(t,e,n){return qe(t,e,n).concat()};var Fi=Ee.while=Ee.whileDo=function(t,e){return S(e)&&(e=Me(e)),function(t,e){return new Ti(t,e)}(t,e).concat()};ve.doWhile=function(t){return gn([this,Fi(t,this)])},Ee.case=function(t,e,n){return Le(function(){S(n)&&(n=Me(n)),n||(n=Be()),Qt(n)&&(n=Be(n));var r=e[t()];return S(r)&&(r=Me(r)),r||n})};var Pi=function(t){function e(e,n,r){this.source=e,this._fn=n,this._scheduler=r,t.call(this)}function n(t,e){var n,r=t[0],i=t[1];if(r.q.length>0){n=r.q.shift();var o=new Mt;r.d.add(o),o.setDisposable(n.subscribe(new Mi(r,i,o))),e([r,i])}else r.isAcquired=!1}return gt(e,t),e.prototype._ensureActive=function(t){var e=!1;t.q.length>0&&(e=!t.isAcquired,t.isAcquired=!0),e&&t.m.setDisposable(this._scheduler.scheduleRecursive([t,this],n))},e.prototype.subscribeCore=function(t){var e=new Rt,n=new jt(e),r={q:[],m:e,d:n,activeCount:0,isAcquired:!1,o:t};return r.q.push(this.source),r.activeCount++,this._ensureActive(r),n},e}(Ce),Mi=function(t){function e(e,n,r){this._s=e,this._p=n,this._m1=r,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._s.o.onNext(t);var e=A(this._p._fn)(t);if(e===j)return this._s.o.onError(e.e);this._s.q.push(e),this._s.activeCount++,this._p._ensureActive(this._s)},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.d.remove(this._m1),this._s.activeCount--,0===this._s.activeCount&&this._s.o.onCompleted()},e}(_e);function bn(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e}ve.expand=function(t,e){return Qt(e)||(e=te),new Pi(this,t,e)};var Ri=function(t){function e(e,n){this._sources=e,this._cb=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){if(0===this._sources.length)return t.onCompleted(),qt;for(var e=this._sources.length,n={finished:!1,hasResults:new Array(e),hasCompleted:new Array(e),results:new Array(e)},r=new jt,i=0,o=this._sources.length;i<o;i++){var s=this._sources[i];S(s)&&(s=Me(s)),r.add(s.subscribe(new Vi(t,n,i,this._cb,r)))}return r},e}(Ce),Vi=function(t){function e(e,n,r,i,o){this._o=e,this._s=n,this._i=r,this._cb=i,this._subs=o,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._s.finished||(this._s.hasResults[this._i]=!0,this._s.results[this._i]=t)},e.prototype.error=function(t){this._s.finished=!0,this._o.onError(t),this._subs.dispose()},e.prototype.completed=function(){if(!this._s.finished){if(!this._s.hasResults[this._i])return this._o.onCompleted();this._s.hasCompleted[this._i]=!0;for(var t=0;t<this._s.results.length;t++)if(!this._s.hasCompleted[t])return;this._s.finished=!0;var e=A(this._cb).apply(null,this._s.results);if(e===j)return this._o.onError(e.e);this._o.onNext(e),this._o.onCompleted()}},e}(_e);Ee.forkJoin=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=N(e[t-1])?e.pop():bn;return Array.isArray(e[0])&&(e=e[0]),new Ri(e,r)},ve.forkJoin=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return Array.isArray(e[0])?e[0].unshift(this):e.unshift(this),Ee.forkJoin.apply(null,e)},ve.manySelect=ve.extend=function(t,e){Qt(e)||(e=y.Scheduler.immediate);var n=this;return Le(function(){var r;return n.map(function(t){var e=new Li(t);return r&&r.onNext(t),r=e,e}).tap(w,function(t){r&&r.onError(t)},function(){r&&r.onCompleted()}).observeOn(e).map(t)},n)};var Li=function(t){function e(e){t.call(this),this.head=e,this.tail=new Vo}return gt(e,t),Et(e.prototype,de,{_subscribe:function(t){var e=new jt;return e.add(te.schedule(this,function(n,r){t.onNext(r.head),e.add(r.tail.mergeAll().subscribe(t))})),e},onCompleted:function(){this.onNext(Ee.empty())},onError:function(t){this.onNext(Ee.throw(t))},onNext:function(t){this.tail.onNext(t),this.tail.onCompleted()}}),e}(Ee),Wi=_.Map||function(){function t(){this.size=0,this._values=[],this._keys=[]}return t.prototype.delete=function(t){var e=this._keys.indexOf(t);return-1!==e&&(this._values.splice(e,1),this._keys.splice(e,1),this.size--,!0)},t.prototype.get=function(t){var e=this._keys.indexOf(t);return-1===e?s:this._values[e]},t.prototype.set=function(t,e){var n=this._keys.indexOf(t);return-1===n?(this._keys.push(t),this._values.push(e),this.size++):this._values[n]=e,this},t.prototype.forEach=function(t,e){for(var n=0;n<this.size;n++)t.call(e,this._values[n],this._keys[n])},t}();function Ii(t){this.patterns=t}function Bi(t,e){this.expression=t,this.selector=e}function zi(t,e,n){var r=t.get(e);if(!r){var i=new Gi(e,n);return t.set(e,i),i}return r}function Ui(t,e,n){this.joinObserverArray=t,this.onNext=e,this.onCompleted=n,this.joinObservers=new Wi;for(var r=0,i=this.joinObserverArray.length;r<i;r++){var o=this.joinObserverArray[r];this.joinObservers.set(o,o)}}Ii.prototype.and=function(t){return new Ii(this.patterns.concat(t))},Ii.prototype.thenDo=function(t){return new Bi(this,t)},Bi.prototype.activate=function(t,e,n){for(var r,i=[],o=(r=e,function(t){r.onError(t)}),s=0,u=this.expression.patterns.length;s<u;s++)i.push(zi(t,this.expression.patterns[s],o));var c=new Ui(i,function(t,e){return function(){var n=A(t.selector).apply(t,arguments);if(n===j)return e.onError(n.e);e.onNext(n)}}(this,e),function(){for(var t=0,e=i.length;t<e;t++)i[t].removeActivePlan(c);n(c)});for(s=0,u=i.length;s<u;s++)i[s].addActivePlan(c);return c},Ui.prototype.dequeue=function(){this.joinObservers.forEach(function(t){t.queue.shift()})},Ui.prototype.match=function(){var t,e,n=!0;for(t=0,e=this.joinObserverArray.length;t<e;t++)if(0===this.joinObserverArray[t].queue.length){n=!1;break}if(n){var r=[],i=!1;for(t=0,e=this.joinObserverArray.length;t<e;t++)r.push(this.joinObserverArray[t].queue[0]),"C"===this.joinObserverArray[t].queue[0].kind&&(i=!0);if(i)this.onCompleted();else{this.dequeue();var o=[];for(t=0,e=r.length;t<r.length;t++)o.push(r[t].value);this.onNext.apply(this,o)}}};var Gi=function(t){function e(e,n){t.call(this),this.source=e,this.onError=n,this.queue=[],this.activePlans=[],this.subscription=new Mt,this.isDisposed=!1}gt(e,t);var n=e.prototype;return n.next=function(t){if(!this.isDisposed){if("E"===t.kind)return this.onError(t.error);this.queue.push(t);for(var e=this.activePlans.slice(0),n=0,r=e.length;n<r;n++)e[n].match()}},n.error=w,n.completed=w,n.addActivePlan=function(t){this.activePlans.push(t)},n.subscribe=function(){this.subscription.setDisposable(this.source.materialize().subscribe(this))},n.removeActivePlan=function(t){this.activePlans.splice(this.activePlans.indexOf(t),1),0===this.activePlans.length&&this.dispose()},n.dispose=function(){t.prototype.dispose.call(this),this.isDisposed||(this.isDisposed=!0,this.subscription.dispose())},e}(_e);ve.and=function(t){return new Ii([this,t])},ve.thenDo=function(t){return new Ii([this]).thenDo(t)},Ee.when=function(){var t,e=arguments.length;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(e);for(var n=0;n<e;n++)t[n]=arguments[n]}return new To(function(e){var n=[],r=new Wi,i=be(function(t){e.onNext(t)},function(t){r.forEach(function(e){e.onError(t)}),e.onError(t)},function(t){e.onCompleted()});try{for(var o=0,s=t.length;o<s;o++)n.push(t[o].activate(r,i,function(t){var r=n.indexOf(t);n.splice(r,1),0===n.length&&e.onCompleted()}))}catch(t){return hn(t).subscribe(e)}var u=new jt;return r.forEach(function(t){t.subscribe(),u.add(t)}),u})};var Hi=function(t){function e(e,n){this._dt=e,this._s=n,t.call(this)}function n(t,e){e.onNext(0),e.onCompleted()}return gt(e,t),e.prototype.subscribeCore=function(t){return this._s.scheduleFuture(t,this._dt,n)},e}(Ce);function Qi(t,e,n){return new To(function(r){var i=t,o=Ht(e);return n.scheduleRecursiveFuture(0,i,function(t,e){if(o>0){var s=n.now();(i=new Date(i.getTime()+o)).getTime()<=s&&(i=new Date(s+o))}r.onNext(t),e(t+1,new Date(i))})})}function Ki(t,e,n){return t===e?new To(function(t){return n.schedulePeriodic(0,e,function(e){return t.onNext(e),e+1})}):Le(function(){return Qi(new Date(n.now()+t),e,n)})}var Ji=Ee.interval=function(t,e){return Ki(t,t,Qt(e)?e:oe)};Ee.timer=function(t,e,n){var r;return Qt(n)||(n=oe),null!=e&&"number"==typeof e?r=e:Qt(e)&&(n=e),(t instanceof Date||"number"==typeof t)&&r===s?function(t,e){return new Hi(t,e)}(t,n):t instanceof Date&&r!==s?Qi(t,e,n):Ki(t,r,n)};function $i(t,e,n){return new To(function(r){var i,o=!1,s=new Rt,u=null,c=[],h=!1;return i=t.materialize().timestamp(n).subscribe(function(t){var i,a;"E"===t.value.kind?((c=[]).push(t),u=t.value.error,a=!h):(c.push({value:t.value,timestamp:t.timestamp+e}),a=!o,o=!0),a&&(null!==u?r.onError(u):(i=new Mt,s.setDisposable(i),i.setDisposable(n.scheduleRecursiveFuture(null,e,function(t,e){var i,s,a,l;if(null===u){h=!0;do{a=null,c.length>0&&c[0].timestamp-n.now()<=0&&(a=c.shift().value),null!==a&&a.accept(r)}while(null!==a);l=!1,s=0,c.length>0?(l=!0,s=Math.max(0,c[0].timestamp-n.now())):o=!1,h=!1,null!==(i=u)?r.onError(i):l&&e(null,s)}}))))}),new Vt(i,s)},t)}ve.delay=function(){var t,e,n,r,i,o=arguments[0];if("number"==typeof o||o instanceof Date){var s=o,u=arguments[1];return Qt(u)||(u=oe),s instanceof Date?function(t,e,n){return Le(function(){return $i(t,e-n.now(),n)})}(this,s,u):$i(this,s,u)}if(Ee.isObservable(o)||N(o))return t=this,e=o,n=arguments[1],N(e)?i=e:(r=e,i=n),new To(function(e){var n=new jt,o=!1,s=new Rt;function u(){s.setDisposable(t.subscribe(function(t){var r=A(i)(t);if(r===j)return e.onError(r.e);var o=new Mt;n.add(o),o.setDisposable(r.subscribe(function(){e.onNext(t),n.remove(o),c()},function(t){e.onError(t)},function(){e.onNext(t),n.remove(o),c()}))},function(t){e.onError(t)},function(){o=!0,s.dispose(),c()}))}function c(){o&&0===n.length&&e.onCompleted()}return r?s.setDisposable(r.subscribe(u,function(t){e.onError(t)},u)):u(),new Vt(s,n)},t);throw new Error("Invalid arguments")};var Xi=function(t){function e(e,n,r){Qt(r)||(r=oe),this.source=e,this._dt=n,this._s=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Rt;return new Vt(this.source.subscribe(new Yi(t,this._dt,this._s,e)),e)},e}(Ce),Yi=function(t){function e(e,n,r,i){this._o=e,this._d=n,this._scheduler=r,this._c=i,this._v=null,this._hv=!1,this._id=0,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._hv=!0,this._v=t;var e=++this._id,n=new Mt;this._c.setDisposable(n),n.setDisposable(this._scheduler.scheduleFuture(this,this._d,function(n,r){r._hv&&r._id===e&&r._o.onNext(t),r._hv=!1}))},e.prototype.error=function(t){this._c.dispose(),this._o.onError(t),this._hv=!1,this._id++},e.prototype.completed=function(){this._c.dispose(),this._hv&&this._o.onNext(this._v),this._o.onCompleted(),this._hv=!1,this._id++},e}(_e);function Qn(t){return t.toArray()}function Qn(t){return t.toArray()}ve.debounce=function(){if(N(arguments[0]))return t=this,e=arguments[0],new To(function(n){var r,i=!1,o=new Rt,s=0,u=t.subscribe(function(t){var u=A(e)(t);if(u===j)return n.onError(u.e);S(u)&&(u=Me(u)),i=!0,r=t;var c=++s,h=new Mt;o.setDisposable(h),h.setDisposable(u.subscribe(function(){i&&s===c&&n.onNext(r),i=!1,h.dispose()},function(t){n.onError(t)},function(){i&&s===c&&n.onNext(r),i=!1,h.dispose()}))},function(t){o.dispose(),n.onError(t),i=!1,s++},function(){o.dispose(),i&&n.onNext(r),n.onCompleted(),i=!1,s++});return new Vt(u,o)},t);if("number"==typeof arguments[0])return new Xi(this,arguments[0],arguments[1]);throw new Error("Invalid arguments");var t,e},ve.windowWithTime=ve.windowTime=function(t,e,n){var r,i=this;return null==e&&(r=t),Qt(n)||(n=oe),"number"==typeof e?r=e:Qt(e)&&(r=t,n=e),new To(function(e){var o,s,u=r,c=t,h=[],a=new Rt,l=0;return o=new jt(a),s=new Wt(o),h.push(new Ro),e.onNext(Ct(h[0],s)),function t(){var i=new Mt,o=!1,f=!1;a.setDisposable(i),c===u?(o=!0,f=!0):c<u?o=!0:f=!0;var p=o?c:u,d=p-l;l=p,o&&(c+=r),f&&(u+=r),i.setDisposable(n.scheduleFuture(null,d,function(){if(f){var n=new Ro;h.push(n),e.onNext(Ct(n,s))}o&&h.shift().onCompleted(),t()}))}(),o.add(i.subscribe(function(t){for(var e=0,n=h.length;e<n;e++)h[e].onNext(t)},function(t){for(var n=0,r=h.length;n<r;n++)h[n].onError(t);e.onError(t)},function(){for(var t=0,n=h.length;t<n;t++)h[t].onCompleted();e.onCompleted()})),s},i)},ve.windowWithTimeOrCount=ve.windowTimeOrCount=function(t,e,n){var r=this;return Qt(n)||(n=oe),new To(function(i){var o=new Rt,s=new jt(o),u=new Wt(s),c=0,h=0,a=new Ro;function l(e){var r=new Mt;o.setDisposable(r),r.setDisposable(n.scheduleFuture(null,t,function(){if(e===h){c=0;var t=++h;a.onCompleted(),a=new Ro,i.onNext(Ct(a,u)),l(t)}}))}return i.onNext(Ct(a,u)),l(0),s.add(r.subscribe(function(t){var n=0,r=!1;a.onNext(t),++c===e&&(r=!0,c=0,n=++h,a.onCompleted(),a=new Ro,i.onNext(Ct(a,u))),r&&l(n)},function(t){a.onError(t),i.onError(t)},function(){a.onCompleted(),i.onCompleted()})),u},r)},ve.bufferWithTime=ve.bufferTime=function(t,e,n){return this.windowWithTime(t,e,n).flatMap(Qn)},ve.bufferWithTimeOrCount=ve.bufferTimeOrCount=function(t,e,n){return this.windowWithTimeOrCount(t,e,n).flatMap(Qn)};var Zi=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new to(t,this._s))},e}(Ce),to=function(t){function e(e,n){this._o=e,this._s=n,this._l=n.now(),t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=this._s.now(),n=e-this._l;this._l=e,this._o.onNext({value:t,interval:n})},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.timeInterval=function(t){return Qt(t)||(t=oe),new Zi(this,t)};var eo=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new no(t,this._s))},e}(Ce),no=function(t){function e(e,n){this._o=e,this._s=n,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._o.onNext({value:t,timestamp:this._s.now()})},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.timestamp=function(t){return Qt(t)||(t=oe),new eo(this,t)};var ro=function(t){function e(e,n){this.source=e,this._sampler=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e={o:t,atEnd:!1,value:null,hasValue:!1,sourceSubscription:new Mt};return e.sourceSubscription.setDisposable(this.source.subscribe(new oo(e))),new Vt(e.sourceSubscription,this._sampler.subscribe(new io(e)))},e}(Ce),io=function(t){function e(e){this._s=e,t.call(this)}return gt(e,t),e.prototype._handleMessage=function(){this._s.hasValue&&(this._s.hasValue=!1,this._s.o.onNext(this._s.value)),this._s.atEnd&&this._s.o.onCompleted()},e.prototype.next=function(){this._handleMessage()},e.prototype.error=function(t){this._s.onError(t)},e.prototype.completed=function(){this._handleMessage()},e}(_e),oo=function(t){function e(e){this._s=e,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._s.hasValue=!0,this._s.value=t},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.atEnd=!0,this._s.sourceSubscription.dispose()},e}(_e);ve.sample=function(t,e){return Qt(e)||(e=oe),new ro(this,"number"==typeof t?Ji(t,e):t)};var so=y.TimeoutError=function(t){this.message=t||"Timeout has occurred",this.name="TimeoutError",Error.call(this)};so.prototype=Object.create(Error.prototype),ve.timeout=function(){var t,e,n,r,i=arguments[0];if(i instanceof Date||"number"==typeof i)return t=this,e=i,n=arguments[1],r=arguments[2],Qt(n)&&(r=n,n=hn(new so)),n instanceof Error&&(n=hn(n)),Qt(r)||(r=oe),Ee.isObservable(n)||(n=hn(new so)),new To(function(i){var o=0,s=new Mt,u=new Rt,c=!1,h=new Rt;function a(){var t=o;h.setDisposable(r.scheduleFuture(null,e,function(){(c=o===t)&&(S(n)&&(n=Me(n)),u.setDisposable(n.subscribe(i)))}))}return u.setDisposable(s),a(),s.setDisposable(t.subscribe(function(t){c||(o++,i.onNext(t),a())},function(t){c||(o++,i.onError(t))},function(){c||(o++,i.onCompleted())})),new Vt(u,h)},t);if(Ee.isObservable(i)||N(i))return function(t,e,n,r){return N(e)&&(r=n,n=e,e=en()),Ee.isObservable(r)||(r=hn(new so)),new To(function(i){var o=new Rt,s=new Rt,u=new Mt;o.setDisposable(u);var c=0,h=!1;function a(t){var e=c,n=new Mt;function u(){return h=e===c}s.setDisposable(n),n.setDisposable(t.subscribe(function(){u()&&o.setDisposable(r.subscribe(i)),n.dispose()},function(t){u()&&i.onError(t)},function(){u()&&o.setDisposable(r.subscribe(i))}))}function l(){var t=!h;return t&&c++,t}return a(e),u.setDisposable(t.subscribe(function(t){if(l()){i.onNext(t);var e=A(n)(t);if(e===j)return i.onError(e.e);a(S(e)?Me(e):e)}},function(t){l()&&i.onError(t)},function(){l()&&i.onCompleted()})),new Vt(o,s)},t)}(this,i,arguments[1],arguments[2]);throw new Error("Invalid arguments")};var uo=function(t){function e(e,n,r,i,o,s){this._state=e,this._cndFn=n,this._itrFn=r,this._resFn=i,this._timeFn=o,this._s=s,t.call(this)}function n(t,e){if(t.hasResult&&t.o.onNext(t.result),t.first)t.first=!1;else if(t.newState=A(t.self._itrFn)(t.newState),t.newState===j)return t.o.onError(t.newState.e);if(t.hasResult=A(t.self._cndFn)(t.newState),t.hasResult===j)return t.o.onError(t.hasResult.e);if(t.hasResult){if(t.result=A(t.self._resFn)(t.newState),t.result===j)return t.o.onError(t.result.e);var n=A(t.self._timeFn)(t.newState);if(n===j)return t.o.onError(n.e);e(t,n)}else t.o.onCompleted()}return gt(e,t),e.prototype.subscribeCore=function(t){var e={o:t,self:this,newState:this._state,first:!0,hasResult:!1};return this._s.scheduleRecursiveFuture(e,new Date(this._s.now()),n)},e}(Ce);Ee.generateWithAbsoluteTime=function(t,e,n,r,i,o){return Qt(o)||(o=oe),new uo(t,e,n,r,i,o)};var co=function(t){function e(e,n,r,i,o,s){this._state=e,this._cndFn=n,this._itrFn=r,this._resFn=i,this._timeFn=o,this._s=s,t.call(this)}function n(t,e){if(t.hasResult&&t.o.onNext(t.result),t.first)t.first=!1;else if(t.newState=A(t.self._itrFn)(t.newState),t.newState===j)return t.o.onError(t.newState.e);if(t.hasResult=A(t.self._cndFn)(t.newState),t.hasResult===j)return t.o.onError(t.hasResult.e);if(t.hasResult){if(t.result=A(t.self._resFn)(t.newState),t.result===j)return t.o.onError(t.result.e);var n=A(t.self._timeFn)(t.newState);if(n===j)return t.o.onError(n.e);e(t,n)}else t.o.onCompleted()}return gt(e,t),e.prototype.subscribeCore=function(t){var e={o:t,self:this,newState:this._state,first:!0,hasResult:!1};return this._s.scheduleRecursiveFuture(e,0,n)},e}(Ce);Ee.generateWithRelativeTime=function(t,e,n,r,i,o){return Qt(o)||(o=oe),new co(t,e,n,r,i,o)};var ho=function(t){function e(e,n,r){this.source=e,this._dt=n,this._s=r,t.call(this)}function n(t,e){var n=e[0],r=e[1];e[2].setDisposable(n.subscribe(r))}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Rt;return e.setDisposable(this._s.scheduleFuture([this.source,t,e],this._dt,n)),e},e}(Ce);ve.delaySubscription=function(t,e){return Qt(e)||(e=oe),new ho(this,t,e)};var ao=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new lo(t,this))},e}(Ce),lo=function(t){function e(e,n){this._o=e,this._s=n._s,this._d=n._d,this._q=[],t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=this._s.now();for(this._q.push({interval:e,value:t});this._q.length>0&&e-this._q[0].interval>=this._d;)this._o.onNext(this._q.shift().value)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){for(var t=this._s.now();this._q.length>0&&t-this._q[0].interval>=this._d;)this._o.onNext(this._q.shift().value);this._o.onCompleted()},e}(_e);ve.skipLastWithTime=function(t,e){return Qt(e)||(e=oe),new ao(this,t,e)};var fo=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new po(t,this._d,this._s))},e}(Ce),po=function(t){function e(e,n,r){this._o=e,this._d=n,this._s=r,this._q=[],t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=this._s.now();for(this._q.push({interval:e,value:t});this._q.length>0&&e-this._q[0].interval>=this._d;)this._q.shift()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){for(var t=this._s.now();this._q.length>0;){var e=this._q.shift();t-e.interval<=this._d&&this._o.onNext(e.value)}this._o.onCompleted()},e}(_e);ve.takeLastWithTime=function(t,e){return Qt(e)||(e=oe),new fo(this,t,e)},ve.takeLastBufferWithTime=function(t,e){var n=this;return Qt(e)||(e=oe),new To(function(r){var i=[];return n.subscribe(function(n){var r=e.now();for(i.push({interval:r,value:n});i.length>0&&r-i[0].interval>=t;)i.shift()},function(t){r.onError(t)},function(){for(var n=e.now(),o=[];i.length>0;){var s=i.shift();n-s.interval<=t&&o.push(s.value)}r.onNext(o),r.onCompleted()})},n)};var bo=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,t.call(this)}function n(t,e){e.onCompleted()}return gt(e,t),e.prototype.subscribeCore=function(t){return new Vt(this._s.scheduleFuture(t,this._d,n),this.source.subscribe(t))},e}(Ce);ve.takeWithTime=function(t,e){return Qt(e)||(e=oe),new bo(this,t,e)};var vo=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,this._open=!1,t.call(this)}function n(t,e){e._open=!0}return gt(e,t),e.prototype.subscribeCore=function(t){return new Vt(this._s.scheduleFuture(this,this._d,n),this.source.subscribe(new _o(t,this)))},e}(Ce),_o=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._p._open&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.skipWithTime=function(t,e){return Qt(e)||(e=oe),new vo(this,t,e)};var yo=function(t){function e(e,n,r){this.source=e,this._st=n,this._s=r,t.call(this)}function n(t,e){e._open=!0}return gt(e,t),e.prototype.subscribeCore=function(t){return this._open=!1,new Vt(this._s.scheduleFuture(this,this._st,n),this.source.subscribe(new wo(t,this)))},e}(Ce),wo=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return gt(e,t),e.prototype.next=function(t){this._p._open&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(_e);ve.skipUntilWithTime=function(t,e){return Qt(e)||(e=oe),new yo(this,t,e)},ve.takeUntilWithTime=function(t,e){Qt(e)||(e=oe);var n=this;return new To(function(r){return new Vt(e.scheduleFuture(r,t,function(t,e){e.onCompleted()}),n.subscribe(r))},n)},ve.throttle=function(t,e){Qt(e)||(e=oe);var n=+t||0;if(n<=0)throw new RangeError("windowDuration cannot be less or equal zero.");var r=this;return new To(function(t){var i=0;return r.subscribe(function(r){var o=e.now();(0===i||o-i>=n)&&(i=o,t.onNext(r))},function(e){t.onError(e)},function(){t.onCompleted()})},r)};var mo=function(t){function e(e,n){this._o=e,this._xform=n,t.call(this)}return gt(e,t),e.prototype.next=function(t){var e=A(this._xform["@@transducer/step"]).call(this._xform,this._o,t);e===j&&this._o.onError(e.e)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._xform["@@transducer/result"](this._o)},e}(_e);ve.transduce=function(t){var e=this;return new To(function(n){var r=t(function(t){return{"@@transducer/init":function(){return t},"@@transducer/step":function(t,e){return t.onNext(e)},"@@transducer/result":function(t){return t.onCompleted()}}}(n));return e.subscribe(new mo(n,r))},e)};var go=function(t){function e(e){this.source=e,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){var e=new Mt,n=new jt,r={hasCurrent:!1,isStopped:!1,o:t,g:n};return n.add(e),e.setDisposable(this.source.subscribe(new Eo(r))),n},e}(Ce),Eo=function(t){function e(e){this._s=e,t.call(this)}function n(e,n){this._s=e,this._i=n,t.call(this)}return gt(e,t),e.prototype.next=function(t){if(!this._s.hasCurrent){this._s.hasCurrent=!0,S(t)&&(t=Me(t));var e=new Mt;this._s.g.add(e),e.setDisposable(t.subscribe(new n(this._s,e)))}},e.prototype.error=function(t){this._s.o.onError(t)},e.prototype.completed=function(){this._s.isStopped=!0,!this._s.hasCurrent&&1===this._s.g.length&&this._s.o.onCompleted()},gt(n,t),n.prototype.next=function(t){this._s.o.onNext(t)},n.prototype.error=function(t){this._s.o.onError(t)},n.prototype.completed=function(){this._s.g.remove(this._i),this._s.hasCurrent=!1,this._s.isStopped&&1===this._s.g.length&&this._s.o.onCompleted()},e}(_e);ve.switchFirst=function(){return new go(this)},ve.flatMapFirst=ve.exhaustMap=function(t,e,n){return new xe(this,t,e,n).switchFirst()},ve.flatMapWithMaxConcurrent=ve.flatMapMaxConcurrent=function(t,e,n,r){return new xe(this,e,n,r).merge(t)};var Co=y.VirtualTimeScheduler=function(t){function e(e,n){this.clock=e,this.comparer=n,this.isEnabled=!1,this.queue=new Nt(1024),t.call(this)}gt(e,t);var n=e.prototype;return n.now=function(){return this.toAbsoluteTime(this.clock)},n.schedule=function(t,e){return this.scheduleAbsolute(t,this.clock,e)},n.scheduleFuture=function(t,e,n){var r=e instanceof Date?this.toRelativeTime(e-this.now()):this.toRelativeTime(e);return this.scheduleRelative(t,r,n)},n.add=G,n.toAbsoluteTime=G,n.toRelativeTime=G,n.schedulePeriodic=function(t,e,n){return new $t(this,t,e,n).start()},n.scheduleRelative=function(t,e,n){var r=this.add(this.clock,e);return this.scheduleAbsolute(t,r,n)},n.start=function(){if(!this.isEnabled){this.isEnabled=!0;do{var t=this.getNext();null!==t?(this.comparer(t.dueTime,this.clock)>0&&(this.clock=t.dueTime),t.invoke()):this.isEnabled=!1}while(this.isEnabled)}},n.stop=function(){this.isEnabled=!1},n.advanceTo=function(t){var e=this.comparer(this.clock,t);if(this.comparer(this.clock,t)>0)throw new B;if(0!==e&&!this.isEnabled){this.isEnabled=!0;do{var n=this.getNext();null!==n&&this.comparer(n.dueTime,t)<=0?(this.comparer(n.dueTime,this.clock)>0&&(this.clock=n.dueTime),n.invoke()):this.isEnabled=!1}while(this.isEnabled);this.clock=t}},n.advanceBy=function(t){var e=this.add(this.clock,t),n=this.comparer(this.clock,e);if(n>0)throw new B;0!==n&&this.advanceTo(e)},n.sleep=function(t){var e=this.add(this.clock,t);if(this.comparer(this.clock,e)>=0)throw new B;this.clock=e},n.getNext=function(){for(;this.queue.length>0;){var t=this.queue.peek();if(!t.isCancelled())return t;this.queue.dequeue()}return null},n.scheduleAbsolute=function(t,e,n){var r=this;var i=new zt(this,t,function(t,e){return r.queue.remove(i),n(t,e)},e,this.comparer);return this.queue.enqueue(i),i.disposable},e}(Gt);function xo(t){this.predicate=t}function So(t){this.predicate=t}y.HistoricalScheduler=function(t){function e(e,n){var r=null==e?0:e,i=n||C;t.call(this,r,i)}gt(e,t);var n=e.prototype;return n.add=function(t,e){return t+e},n.toAbsoluteTime=function(t){return new Date(t).getTime()},n.toRelativeTime=function(t){return t},e}(y.VirtualTimeScheduler),xo.prototype.equals=function(t){return t===this||null!=t&&("N"===t.kind&&this.predicate(t.value))},So.prototype.equals=function(t){return t===this||null!=t&&("E"===t.kind&&this.predicate(t.error))};var No=y.ReactiveTest={created:100,subscribed:200,disposed:1e3,onNext:function(t,e){return new Do(t,"function"==typeof e?new xo(e):ue.createOnNext(e))},onError:function(t,e){return new Do(t,"function"==typeof e?new So(e):ue.createOnError(e))},onCompleted:function(t){return new Do(t,ue.createOnCompleted())},subscribe:function(t,e){return new jo(t,e)}},Do=y.Recorded=function(t,e,n){this.time=t,this.value=e,this.comparer=n||E};Do.prototype.equals=function(t){return this.time===t.time&&this.comparer(this.value,t.value)},Do.prototype.toString=function(){return this.value.toString()+"@"+this.time};var jo=y.Subscription=function(t,e){this.subscribe=t,this.unsubscribe=e||Number.MAX_VALUE};jo.prototype.equals=function(t){return this.subscribe===t.subscribe&&this.unsubscribe===t.unsubscribe},jo.prototype.toString=function(){return"("+this.subscribe+", "+(this.unsubscribe===Number.MAX_VALUE?"Infinite":this.unsubscribe)+")"},(y.MockDisposable=function(t){this.scheduler=t,this.disposes=[],this.disposes.push(this.scheduler.clock)}).prototype.dispose=function(){this.disposes.push(this.scheduler.clock)};var Ao=function(t){function e(e){t.call(this),this.scheduler=e,this.messages=[]}gt(e,t);var n=e.prototype;return n.onNext=function(t){this.messages.push(new Do(this.scheduler.clock,ue.createOnNext(t)))},n.onError=function(t){this.messages.push(new Do(this.scheduler.clock,ue.createOnError(t)))},n.onCompleted=function(){this.messages.push(new Do(this.scheduler.clock,ue.createOnCompleted()))},e}(de);function ko(t,e){var n=this;this.scheduler=t,this.messages=e,this.subscriptions=[],this.observers=[];for(var r=0,i=this.messages.length;r<i;r++){var o=this.messages[r];!function(e){t.scheduleAbsolute(null,o.time,function(){for(var t=n.observers.slice(0),r=0,i=t.length;r<i;r++)e.accept(t[r]);return qt})}(o.value)}}ko.prototype.then=function(t,e){var n=this;this.subscriptions.push(new jo(this.scheduler.clock));var r,i=this.subscriptions.length-1,o=y.Observer.create(function(e){var u=t(e);if(u&&"function"==typeof u.then)r=u;else{var c=n.scheduler.clock;r=new ko(n.scheduler,[y.ReactiveTest.onNext(c,s),y.ReactiveTest.onCompleted(c)])}var h=n.observers.indexOf(o);n.observers.splice(h,1),n.subscriptions[i]=new jo(n.subscriptions[i].subscribe,n.scheduler.clock)},function(t){e(t);var r=n.observers.indexOf(o);n.observers.splice(r,1),n.subscriptions[i]=new jo(n.subscriptions[i].subscribe,n.scheduler.clock)});return this.observers.push(o),r||new ko(this.scheduler,this.messages)};var Oo=function(t){function e(e,n){t.call(this);var r,i=this;this.scheduler=e,this.messages=n,this.subscriptions=[],this.observers=[];for(var o=0,s=this.messages.length;o<s;o++)!function(t){e.scheduleAbsolute(null,r.time,function(){for(var e=i.observers.slice(0),n=0,r=e.length;n<r;n++)t.accept(e[n]);return qt})}((r=this.messages[o]).value)}return gt(e,t),e.prototype._subscribe=function(t){var e=this;this.observers.push(t),this.subscriptions.push(new jo(this.scheduler.clock));var n=this.subscriptions.length-1;return Ot(function(){var r=e.observers.indexOf(t);e.observers.splice(r,1),e.subscriptions[n]=new jo(e.subscriptions[n].subscribe,e.scheduler.clock)})},e}(Ee),qo=function(t){function e(e,n){t.call(this),this.scheduler=e,this.messages=n,this.subscriptions=[]}return gt(e,t),e.prototype._subscribe=function(t){var e,n=this;this.subscriptions.push(new jo(this.scheduler.clock));for(var r=this.subscriptions.length-1,i=new jt,o=0,s=this.messages.length;o<s;o++)!function(r){i.add(n.scheduler.scheduleRelative(null,e.time,function(){return r.accept(t),qt}))}((e=this.messages[o]).value);return Ot(function(){n.subscriptions[r]=new jo(n.subscriptions[r].subscribe,n.scheduler.clock),i.dispose()})},e}(Ee);y.TestScheduler=function(t){function e(t,e){return t>e?1:t<e?-1:0}function n(){t.call(this,0,e)}return gt(n,t),n.prototype.scheduleAbsolute=function(e,n,r){return n<=this.clock&&(n=this.clock+1),t.prototype.scheduleAbsolute.call(this,e,n,r)},n.prototype.add=function(t,e){return t+e},n.prototype.toAbsoluteTime=function(t){return new Date(t).getTime()},n.prototype.toRelativeTime=function(t){return t},n.prototype.startScheduler=function(t,e){e||(e={}),null==e.created&&(e.created=No.created),null==e.subscribed&&(e.subscribed=No.subscribed),null==e.disposed&&(e.disposed=No.disposed);var n,r,i=this.createObserver();return this.scheduleAbsolute(null,e.created,function(){return n=t(),qt}),this.scheduleAbsolute(null,e.subscribed,function(){return r=n.subscribe(i),qt}),this.scheduleAbsolute(null,e.disposed,function(){return r.dispose(),qt}),this.start(),i},n.prototype.createHotObservable=function(){var t,e=arguments.length;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(e);for(var n=0;n<e;n++)t[n]=arguments[n]}return new Oo(this,t)},n.prototype.createColdObservable=function(){var t,e=arguments.length;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(e);for(var n=0;n<e;n++)t[n]=arguments[n]}return new qo(this,t)},n.prototype.createResolvedPromise=function(t,e){return new ko(this,[y.ReactiveTest.onNext(t,e),y.ReactiveTest.onCompleted(t)])},n.prototype.createRejectedPromise=function(t,e){return new ko(this,[y.ReactiveTest.onError(t,e)])},n.prototype.createObserver=function(){return new Ao(this)},n}(Co);var To=y.AnonymousObservable=function(t){function e(t,e){var n,r=e[0],i=e[1],o=A(i.__subscribe).call(i,r);o!==j||r.fail(j.e)||k(j.e),r.setDisposable((n=o)&&N(n.dispose)?n:N(n)?Ot(n):qt)}function n(e,n){this.source=n,this.__subscribe=e,t.call(this)}return gt(n,t),n.prototype._subscribe=function(t){var n=new Fo(t),r=[n,this];return te.scheduleRequired()?te.schedule(r,e):e(0,r),n},n}(Ee),Fo=function(t){function e(e){t.call(this),this.observer=e,this.m=new Mt}gt(e,t);var n=e.prototype;return n.next=function(t){var e=A(this.observer.onNext).call(this.observer,t);e===j&&(this.dispose(),k(e.e))},n.error=function(t){var e=A(this.observer.onError).call(this.observer,t);this.dispose(),e===j&&k(e.e)},n.completed=function(){var t=A(this.observer.onCompleted).call(this.observer);this.dispose(),t===j&&k(t.e)},n.setDisposable=function(t){this.m.setDisposable(t)},n.getDisposable=function(){return this.m.getDisposable()},n.dispose=function(){t.prototype.dispose.call(this),this.m.dispose()},e}(_e),Po=function(t){function e(e,n){this._m=e,this._u=n,t.call(this)}return gt(e,t),e.prototype.subscribeCore=function(t){return new Vt(this._m.getDisposable(),this._u.subscribe(t))},e}(Ce),Mo=function(t){function e(e,n,r){t.call(this),this.key=e,this.underlyingObservable=r?new Po(r,n):n}return gt(e,t),e.prototype._subscribe=function(t){return this.underlyingObservable.subscribe(t)},e}(Ee),Ro=y.Subject=function(t){function e(){t.call(this),this.isDisposed=!1,this.isStopped=!1,this.observers=[],this.hasError=!1}return gt(e,t),Et(e.prototype,de.prototype,{_subscribe:function(t){return Ft(this),this.isStopped?this.hasError?(t.onError(this.error),qt):(t.onCompleted(),qt):(this.observers.push(t),new ji(this,t))},hasObservers:function(){return Ft(this),this.observers.length>0},onCompleted:function(){if(Ft(this),!this.isStopped){this.isStopped=!0;for(var t=0,e=D(this.observers),n=e.length;t<n;t++)e[t].onCompleted();this.observers.length=0}},onError:function(t){if(Ft(this),!this.isStopped){this.isStopped=!0,this.error=t,this.hasError=!0;for(var e=0,n=D(this.observers),r=n.length;e<r;e++)n[e].onError(t);this.observers.length=0}},onNext:function(t){if(Ft(this),!this.isStopped)for(var e=0,n=D(this.observers),r=n.length;e<r;e++)n[e].onNext(t)},dispose:function(){this.isDisposed=!0,this.observers=null}}),e.create=function(t,e){return new Io(t,e)},e}(Ee),Vo=y.AsyncSubject=function(t){function e(){t.call(this),this.isDisposed=!1,this.isStopped=!1,this.hasValue=!1,this.observers=[],this.hasError=!1}return gt(e,t),Et(e.prototype,de.prototype,{_subscribe:function(t){return Ft(this),this.isStopped?(this.hasError?t.onError(this.error):this.hasValue?(t.onNext(this.value),t.onCompleted()):t.onCompleted(),qt):(this.observers.push(t),new ji(this,t))},hasObservers:function(){return Ft(this),this.observers.length>0},onCompleted:function(){var t;if(Ft(this),!this.isStopped){this.isStopped=!0;var e=D(this.observers),n=e.length;if(this.hasValue)for(t=0;t<n;t++){var r=e[t];r.onNext(this.value),r.onCompleted()}else for(t=0;t<n;t++)e[t].onCompleted();this.observers.length=0}},onError:function(t){if(Ft(this),!this.isStopped){this.isStopped=!0,this.hasError=!0,this.error=t;for(var e=0,n=D(this.observers),r=n.length;e<r;e++)n[e].onError(t);this.observers.length=0}},onNext:function(t){Ft(this),this.isStopped||(this.value=t,this.hasValue=!0)},dispose:function(){this.isDisposed=!0,this.observers=null,this.error=null,this.value=null}}),e}(Ee),Lo=y.BehaviorSubject=function(t){function e(e){t.call(this),this.value=e,this.observers=[],this.isDisposed=!1,this.isStopped=!1,this.hasError=!1}return gt(e,t),Et(e.prototype,de.prototype,{_subscribe:function(t){return Ft(this),this.isStopped?(this.hasError?t.onError(this.error):t.onCompleted(),qt):(this.observers.push(t),t.onNext(this.value),new ji(this,t))},getValue:function(){return Ft(this),this.hasError&&k(this.error),this.value},hasObservers:function(){return Ft(this),this.observers.length>0},onCompleted:function(){if(Ft(this),!this.isStopped){this.isStopped=!0;for(var t=0,e=D(this.observers),n=e.length;t<n;t++)e[t].onCompleted();this.observers.length=0}},onError:function(t){if(Ft(this),!this.isStopped){this.isStopped=!0,this.hasError=!0,this.error=t;for(var e=0,n=D(this.observers),r=n.length;e<r;e++)n[e].onError(t);this.observers.length=0}},onNext:function(t){if(Ft(this),!this.isStopped){this.value=t;for(var e=0,n=D(this.observers),r=n.length;e<r;e++)n[e].onNext(t)}},dispose:function(){this.isDisposed=!0,this.observers=null,this.value=null,this.error=null}}),e}(Ee),Wo=y.ReplaySubject=function(t){var e=Math.pow(2,53)-1;function n(n,r,i){this.bufferSize=null==n?e:n,this.windowSize=null==r?e:r,this.scheduler=i||te,this.q=[],this.observers=[],this.isStopped=!1,this.isDisposed=!1,this.hasError=!1,this.error=null,t.call(this)}return gt(n,t),Et(n.prototype,de.prototype,{_subscribe:function(t){Ft(this);var e,n,r=new me(this.scheduler,t),i=(e=this,n=r,Ot(function(){n.dispose(),!e.isDisposed&&e.observers.splice(e.observers.indexOf(n),1)}));this._trim(this.scheduler.now()),this.observers.push(r);for(var o=0,s=this.q.length;o<s;o++)r.onNext(this.q[o].value);return this.hasError?r.onError(this.error):this.isStopped&&r.onCompleted(),r.ensureActive(),i},hasObservers:function(){return Ft(this),this.observers.length>0},_trim:function(t){for(;this.q.length>this.bufferSize;)this.q.shift();for(;this.q.length>0&&t-this.q[0].interval>this.windowSize;)this.q.shift()},onNext:function(t){if(Ft(this),!this.isStopped){var e=this.scheduler.now();this.q.push({interval:e,value:t}),this._trim(e);for(var n=0,r=D(this.observers),i=r.length;n<i;n++){var o=r[n];o.onNext(t),o.ensureActive()}}},onError:function(t){if(Ft(this),!this.isStopped){this.isStopped=!0,this.error=t,this.hasError=!0;var e=this.scheduler.now();this._trim(e);for(var n=0,r=D(this.observers),i=r.length;n<i;n++){var o=r[n];o.onError(t),o.ensureActive()}this.observers.length=0}},onCompleted:function(){if(Ft(this),!this.isStopped){this.isStopped=!0;var t=this.scheduler.now();this._trim(t);for(var e=0,n=D(this.observers),r=n.length;e<r;e++){var i=n[e];i.onCompleted(),i.ensureActive()}this.observers.length=0}},dispose:function(){this.isDisposed=!0,this.observers=null}}),n}(Ee),Io=y.AnonymousSubject=function(t){function e(e,n){this.observer=e,this.observable=n,t.call(this)}return gt(e,t),Et(e.prototype,de.prototype,{_subscribe:function(t){return this.observable.subscribe(t)},onCompleted:function(){this.observer.onCompleted()},onError:function(t){this.observer.onError(t)},onNext:function(t){this.observer.onNext(t)}}),e}(Ee);y.Pauser=function(t){function e(){t.call(this)}return gt(e,t),e.prototype.pause=function(){this.onNext(!1)},e.prototype.resume=function(){this.onNext(!0)},e}(Ro),_.Rx=y,(o=function(){return y}.call(e,n,e,t))===s||(t.exports=o);var Bo=V()}).call(this)}).call(this,n(1)(t),n(2),n(3))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var c,h=[],a=!1,l=-1;function f(){a&&c&&(a=!1,c.length?h=c.concat(h):l=-1,h.length&&p())}function p(){if(!a){var t=u(f);a=!0;for(var e=h.length;e;){for(c=h,h=[];++l<e;)c&&c[l].run();l=-1,e=h.length}c=null,a=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function b(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];h.push(new d(t,e)),1!==h.length||a||u(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=b,i.addListener=b,i.once=b,i.off=b,i.removeListener=b,i.removeAllListeners=b,i.emit=b,i.prependListener=b,i.prependOnceListener=b,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";n.r(e);var r,i=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},o=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},s=function(){function t(t,e){this.viewFile=t,this.loader=e}return t.create=function(e,n){return new t(e,n)},t.prototype.load=function(){return i(this,void 0,void 0,function(){var t,e,n;return o(this,function(r){switch(r.label){case 0:return this.element?[2,this.element]:[4,this.loader.load(this.viewFile)];case 1:if(t=r.sent(),!(e=(new DOMParser).parseFromString(t,"text/html").firstChild))throw new Error("Could not load view from "+this.viewFile);return n=e.getElementsByTagName("body"),this.element=n&&n[0].firstElementChild?n[0].firstElementChild:e,[2,this.element]}})})},t}(),u=function(){function t(t){this.factory=t}return Object.defineProperty(t.prototype,"Value",{get:function(){return this.value||(this.value=this.factory())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"IsCreated",{get:function(){return!!this.value},enumerable:!0,configurable:!0}),t.Create=function(e){return new t(e)},t}(),c=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},h=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=function(){function t(t,e){var n=this;this.ViewFile="EditEntryCardView.html",this.viewModel=e,this.element=u.Create(function(){return s.create(n.ViewFile,t).load()})}return t.prototype.remove=function(){return c(this,void 0,void 0,function(){return h(this,function(t){switch(t.label){case 0:return this.element.IsCreated?[4,this.element.Value]:[3,2];case 1:t.sent().remove(),t.label=2;case 2:return[2]}})})},t.prototype.loadIntoParent=function(t){return c(this,void 0,void 0,function(){var e,n,r,i,o=this;return h(this,function(s){switch(s.label){case 0:return[4,this.remove()];case 1:return s.sent(),[4,this.element.Value];case 2:if(e=s.sent(),t.appendChild(e),n=e.querySelector("input[id='answerInput']"),r=e.querySelector("input[id='questionInput']"),!n||!r)throw Error("Could not find all children in view.");return this.viewModel.answer.subscribe(function(t){n.value=t}),this.viewModel.question.subscribe(function(t){r.value=t}),n.onchange=function(t){o.viewModel.setAnswer(n.value)},r.onchange=function(t){o.viewModel.setQuestion(r.value)},(i=e.querySelector("button[id='saveEntry']")).onclick=function(t){o.viewModel.save()},this.viewModel.canExecuteSave.subscribe(function(t){i.disabled=!t}),e.querySelector("button[id='cancel']").onclick=function(t){o.viewModel.cancel()},[2]}})})},t}(),l=n(0),f=function(){function t(t,e){this.selectedSubject=new l.Subject,this._question=t,this._answer=e}return Object.defineProperty(t.prototype,"selected",{get:function(){return this.selectedSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"question",{get:function(){return this._question},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"answer",{get:function(){return this._answer},enumerable:!0,configurable:!0}),t.prototype.select=function(){this.selectedSubject.onNext(this)},t}(),p=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),d=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},b=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},v=function(){function t(t){var e=this;this.ViewFile="CardView.html",this.selectedBehavior=new l.Subject,this.views=new _,this.view=s.create(this.ViewFile,t),this.element=u.Create(function(){return d(e,void 0,void 0,function(){return b(this,function(t){switch(t.label){case 0:return[4,this.view.load()];case 1:return[2,t.sent()]}})})}),this.viewModelSubject=new l.BehaviorSubject(new f("","")),this.viewModelSubject.subscribe(function(t){return e.onViewModelChanged(t)})}return Object.defineProperty(t.prototype,"selected",{get:function(){return this.selectedBehavior.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"viewModel",{get:function(){return this.viewModelSubject.getValue()},set:function(t){this.viewModelSubject.onNext(t)},enumerable:!0,configurable:!0}),t.prototype.detach=function(){return d(this,void 0,void 0,function(){return b(this,function(t){switch(t.label){case 0:return this.element.IsCreated?[4,this.element.Value]:[3,2];case 1:t.sent().remove(),t.label=2;case 2:return[2]}})})},t.prototype.loadIntoParent=function(t){return d(this,void 0,void 0,function(){var e,n,r;return b(this,function(i){switch(i.label){case 0:return[4,this.detach()];case 1:return i.sent(),[4,this.element.Value];case 2:if(e=i.sent(),t.appendChild(e),n=e.querySelector("#questionText"),r=e.querySelector("#answerText"),!n||!r)throw Error("Could not find all expected children in view.");return this.views=new y(e,n,r),this.onViewModelChanged(this.viewModelSubject.getValue()),[2]}})})},t.prototype.onViewModelChanged=function(t){this.views.question=t.question,this.views.answer=t.answer,this.views.clickHandler=function(){return t.select()}},t}(),_=function(){function t(){}return Object.defineProperty(t.prototype,"question",{set:function(t){},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"answer",{set:function(t){},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"clickHandler",{set:function(t){},enumerable:!0,configurable:!0}),t}(),y=function(t){function e(e,n,r){var i=t.call(this)||this;return i.questionElement=n,i.answerElement=r,i.parentElement=e,i}return p(e,t),Object.defineProperty(e.prototype,"question",{set:function(t){this.questionElement.textContent=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"answer",{set:function(t){this.answerElement.textContent=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"clickHandler",{set:function(t){this.parentElement.onclick=t},enumerable:!0,configurable:!0}),e}(_),w=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},m=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},g=function(){function t(t,e){var n=this;this.ViewFile="EditorPage.html",this.cardViews=[],this.loader=t,this.viewModel=e,this.element=u.Create(function(){return w(n,void 0,void 0,function(){return m(this,function(e){switch(e.label){case 0:return[4,s.create(this.ViewFile,t).load()];case 1:return[2,e.sent()]}})})})}return t.prototype.loadIntoParent=function(t){return w(this,void 0,void 0,function(){var e,n,r,i,o,s=this;return m(this,function(u){switch(u.label){case 0:return[4,this.element.Value];case 1:if(e=u.sent(),t.appendChild(e),n=e.querySelector("div[id='editorContainer']"),r=e.querySelector("div[id='cardsContainer']"),i=e.querySelector("div[id='addEntryButton'"),o=M.FloatingActionButton.init(i),!n||!r||!o)throw Error("Could not find all views in layout.");return i.onclick=function(t){return s.viewModel.addCard()},this.viewModel.flashCards.subscribe(function(t){return s.updateFlashCardsList(t,r)}),this.viewModel.editingEntry.subscribe(function(t){return w(s,void 0,void 0,function(){return m(this,function(e){return t?this.onEditingStarted(n,t):this.editorView&&this.onFinishEditing(),[2]})})}),[4,this.viewModel.load()];case 2:return u.sent(),[2]}})})},t.prototype.onEditingStarted=function(t,e){return w(this,void 0,void 0,function(){var n;return m(this,function(r){switch(r.label){case 0:return[4,(n=new a(this.loader,e)).loadIntoParent(t)];case 1:return r.sent(),this.editorView=n,[2]}})})},t.prototype.detachMatchingCard=function(t){return w(this,void 0,void 0,function(){var e;return m(this,function(n){switch(n.label){case 0:if((e=this.cardViews.findIndex(function(e){return e.viewModel===t}))<0)throw Error("Attempting to edit unknown Entry.");return[4,this.cardViews[e].detach()];case 1:return n.sent(),[2,e]}})})},t.prototype.onFinishEditing=function(){return w(this,void 0,void 0,function(){return m(this,function(t){switch(t.label){case 0:return this.editorView?[4,this.editorView.remove()]:[2];case 1:return t.sent(),this.editorView=null,[2]}})})},t.prototype.updateFlashCardsList=function(t,e){return w(this,void 0,void 0,function(){var n,r,i,o,s;return m(this,function(u){switch(u.label){case 0:if(!((n=t.length-this.cardViews.length)<0))return[3,1];for(i=n;i<0;){if(!(r=this.cardViews.pop()))throw new Error("Controller undefined when attempting to remove.");r.detach(),++i}return[3,4];case 1:if(!(n>0))return[3,4];i=0,u.label=2;case 2:return i<n?[4,(o=new v(this.loader)).loadIntoParent(e)]:[3,4];case 3:return u.sent(),this.cardViews.push(o),++i,[3,2];case 4:if(this.cardViews.length!=t.length)throw Error("ViewModel and View sizes do not match.");return s=this.cardViews[Symbol.iterator](),t.forEach(function(t){s.next().value.viewModel=t}),[2]}})})},t}(),E=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},C=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},x=function(){function t(t,e,n){this.dbProvider=t,this.version=n,this.storeName=e}return t.prototype.save=function(t){return E(this,void 0,void 0,function(){var e,n,r,i,o;return C(this,function(s){switch(s.label){case 0:return[4,this.open()];case 1:return e=s.sent(),n=e.transaction("Entries","readwrite"),r=n.objectStore("Entries"),t.id?i=r.put(t):(delete(o=Object.assign({},t)).id,i=r.add(o)),[2,new Promise(function(e,n){i.onsuccess=function(n){t.id=i.result,e(t)},i.onerror=function(t){n()}})]}})})},t.prototype.getAll=function(){return E(this,void 0,void 0,function(){var t,e;return C(this,function(n){switch(n.label){case 0:return[4,this.open()];case 1:return t=n.sent(),e=t.transaction(this.storeName).objectStore(this.storeName).getAll(),[2,new Promise(function(t,n){e.onsuccess=function(n){var r=e.result||[];t(r)}})]}})})},t.prototype.open=function(){var t=this,e=this.dbProvider.open("FlashCards",this.version);return new Promise(function(n,r){e.onupgradeneeded=function(n){var r=e.result;r&&r.createObjectStore(t.storeName,{autoIncrement:!0,keyPath:"id"})},e.onsuccess=function(t){var i=e.result;i?n(i):r(new Error("Could not open FlashCards database."))}})},t}(),S=function(){function t(){}return t.createAutoIncrementStore=function(t,e,n){return new x(t,e,n)},t}(),N=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},D=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},j=function(){function t(t,e,n){this.question=t,this.answer=e,this.id=n||null}return t.fromDto=function(e){return new t(k.fromString(e.question),O.fromString(e.answer),e.id)},t.prototype.getMutableCopy=function(){return A.fromData(new T({id:this.id,question:this.question.value,answer:this.answer.value}))},t}(),A=function(){function t(t,e,n){this.question=t,this.answer=e,this.id=n||null}return t.prototype.asEntry=function(){return j.fromDto(new T({id:this.id,question:this.question,answer:this.answer}))},t.fromData=function(e){return new t(e.question,e.answer,e.id)},t}(),k=function(){function t(t){this._value=t}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},enumerable:!0,configurable:!0}),t.fromString=function(e){return new t(e)},t}(),O=function(){function t(t){this._value=t}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},enumerable:!0,configurable:!0}),t.fromString=function(e){return new t(e)},t}(),q=function(){function t(t){this.databaseVersion=1,this.store=S.createAutoIncrementStore(t,"Entries",this.databaseVersion)}return t.prototype.save=function(e){return N(this,void 0,void 0,function(){var n,r,i;return D(this,function(o){switch(o.label){case 0:return r=(n=j).fromDto,i=T.bind,[4,this.store.save(t.createEntryDto(e))];case 1:return[2,r.apply(n,[new(i.apply(T,[void 0,o.sent()]))])]}})})},t.prototype.createEntry=function(t,e){return j.fromDto(new T({id:null,question:t,answer:e}))},t.prototype.getAll=function(){return N(this,void 0,void 0,function(){return D(this,function(t){switch(t.label){case 0:return[4,this.store.getAll()];case 1:return[2,t.sent().map(function(t){return j.fromDto(new T(t))})]}})})},t.createEntryDto=function(t){return{id:t.id,question:t.question.value,answer:t.answer.value}},t}(),T=function(){function t(t){this.dto=t}return Object.defineProperty(t.prototype,"id",{get:function(){return this.dto.id},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"question",{get:function(){return this.dto.question},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"answer",{get:function(){return this.dto.answer},enumerable:!0,configurable:!0}),t}(),F=function(){function t(){}return t.Utf8ArrayToStr=function(t){var e,n,r,i,o,s;for(e="",r=t.length,n=0;n<r;)switch((i=t[n++])>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:e+=String.fromCharCode(i);break;case 12:case 13:o=t[n++],e+=String.fromCharCode((31&i)<<6|63&o);break;case 14:o=t[n++],s=t[n++],e+=String.fromCharCode((15&i)<<12|(63&o)<<6|(63&s)<<0)}return e},t}(),P=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},R=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},V=function(){function t(){}return t.createFetchHtmlLoader=function(t){return new L(t,"./html/")},t}(),L=function(){function t(t,e){this.root=e,this.globalFetch=t}return t.prototype.load=function(t){return P(this,void 0,void 0,function(){var e,n,r,i;return R(this,function(o){switch(o.label){case 0:return e=this.root+t,[4,this.globalFetch.fetch(e)];case 1:return(n=o.sent())&&n.body?[4,n.body.getReader().read()]:[2,""];case 2:return r=o.sent(),r.done,i=r.value,[2,F.Utf8ArrayToStr(i)]}})})},t}(),W=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},I=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},B=function(){function t(t,e){var n=this;this.questionSubject=new l.BehaviorSubject(""),this.answerSubject=new l.BehaviorSubject(""),this.canExecuteSaveSubject=new l.BehaviorSubject(!1),this.isCancelledSubject=new l.BehaviorSubject(!1),this.savedSubject=new l.Subject,this.entryService=t,this.entry=e||null,e&&(this.answerSubject.onNext(e.answer.value),this.questionSubject.onNext(e.question.value)),this.savedSubject.subscribe(function(t){n.entry=t}),this.answer.subscribe(function(t){n.updateCanExecuteSave()}),this.question.subscribe(function(t){n.updateCanExecuteSave()})}return Object.defineProperty(t.prototype,"saved",{get:function(){return this.savedSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isCancelled",{get:function(){return this.isCancelledSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"answer",{get:function(){return this.answerSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"question",{get:function(){return this.questionSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"canExecuteSave",{get:function(){return this.canExecuteSaveSubject.asObservable()},enumerable:!0,configurable:!0}),t.prototype.setAnswer=function(t){this.answerSubject.onNext(t)},t.prototype.setQuestion=function(t){this.questionSubject.onNext(t)},t.prototype.cancel=function(){this.isCancelledSubject.onNext(!0)},t.prototype.updateCanExecuteSave=function(){this.canExecuteSaveSubject.onNext(!this.isCancelledSubject.getValue()&&!!this.answerSubject.getValue()&&!!this.questionSubject.getValue())},t.prototype.save=function(){return W(this,void 0,void 0,function(){var t,e,n,r;return I(this,function(i){switch(i.label){case 0:return this.canExecuteSaveSubject.getValue()?(this.entry?((e=this.entry.getMutableCopy()).question=this.questionSubject.getValue(),e.answer=this.answerSubject.getValue(),t=e.asEntry()):t=this.entryService.createEntry(this.questionSubject.getValue(),this.answerSubject.getValue()),r=(n=this.savedSubject).onNext,[4,this.entryService.save(t)]):[2];case 1:return r.apply(n,[i.sent()]),this.setQuestion(""),this.setAnswer(""),[2]}})})},t}(),z=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},U=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},G=function(){function t(t){var e=this;this.canExecuteAddCardSubject=new l.BehaviorSubject(!0),this.editingSubject=new l.BehaviorSubject(null),this.flashCardsSubject=new l.BehaviorSubject([]),this.modelLookup=new Map,this.entryService=t,this.editingSubject.subscribe(function(t){e.canExecuteAddCardSubject.onNext(!t)})}return Object.defineProperty(t.prototype,"canExecuteAddCard",{get:function(){return this.canExecuteAddCardSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"editingEntry",{get:function(){return this.editingSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"flashCards",{get:function(){return this.flashCardsSubject.asObservable()},enumerable:!0,configurable:!0}),t.prototype.addCard=function(){var t=this;if(this.canExecuteAddCardSubject.getValue()){var e=new B(this.entryService),n=new l.CompositeDisposable;n.add(e.saved.take(1).subscribe(function(e){var r=t.flashCardsSubject.getValue();r.push(new f(e.question.value,e.answer.value)),t.flashCardsSubject.onNext(r),n.dispose(),t.editingSubject.onNext(null)})),n.add(e.isCancelled.where(function(t){return t}).take(1).subscribe(function(e){n.dispose(),t.editingSubject.onNext(null)})),this.editingSubject.onNext(e)}},t.prototype.load=function(){return z(this,void 0,void 0,function(){var t,e=this;return U(this,function(n){switch(n.label){case 0:return[4,this.entryService.getAll()];case 1:return t=n.sent(),this.flashCardsSubject.onNext(t.map(function(t){var n=new f(t.question.value,t.answer.value);return n.selected.subscribe(function(t){return e.onCardSelected(t)}),e.modelLookup.set(n,t),n})),[2]}})})},t.prototype.onCardSelected=function(t){var e=this,n=this.modelLookup.get(t);if(n){var r=new B(this.entryService,n),i=new l.CompositeDisposable;i.add(r.saved.take(1).subscribe(function(t){i.dispose(),e.editingSubject.onNext(null),e.load()})),i.add(r.isCancelled.take(1).subscribe(function(t){t&&(i.dispose(),e.editingSubject.onNext(null))}));var o=this.flashCardsSubject.getValue(),s=o.indexOf(t);o.splice(s,1),this.flashCardsSubject.onNext(o),this.editingSubject.onNext(r)}},t}(),H=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,u)}c((r=r.apply(t,e||[])).next())})},Q=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},K=function(){function t(t,e){var n=this;this.entryService=new q(t.indexedDB),t.onload=function(){return H(n,void 0,void 0,function(){return Q(this,function(t){switch(t.label){case 0:return[4,this.onWindowLoaded()];case 1:return t.sent(),[2]}})})},"serviceWorker"in navigator&&this.registerServiceWorker(navigator.serviceWorker),t.addEventListener("beforeinstallprompt",function(t){t.preventDefault(),e.promptInstallation({platforms:t.platforms,userChoice:t.userChoice,prompt:function(){return t.prompt.call(t)}})})}return t.prototype.onWindowLoaded=function(){return H(this,void 0,void 0,function(){var t,e,n;return Q(this,function(r){switch(r.label){case 0:return[4,navigator.serviceWorker.ready];case 1:return r.sent(),t=V.createFetchHtmlLoader(window),(e=document.getElementById("main"))?(n=new G(this.entryService),new g(t,n).loadIntoParent(e),[2]):[2]}})})},t.prototype.onServiceWorkerChanged=function(t){var e=document.getElementById("butRefresh");e&&(e.addEventListener("click",function(){t.postMessage({action:"skipWaiting"})}),e.hidden=!1)},t.prototype.registerServiceWorker=function(t){var e,n=this;t.register("/service-worker.js").then(function(t){t.addEventListener("updatefound",function(){var e=t.installing;e&&e.addEventListener("statechange",function(){if(e)switch(e.state){case"installed":navigator.serviceWorker.controller&&n.onServiceWorkerChanged(e)}})})}),t.addEventListener("controllerchange",function(){e||(window.location.reload(),e=!0)})},t}(),J=function(){function t(){}return t.prototype.promptInstallation=function(t){var e=document.getElementById("butAdd");e&&(e.hidden=!1,e.onclick=t.prompt)},t}();new K(window,new J)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,